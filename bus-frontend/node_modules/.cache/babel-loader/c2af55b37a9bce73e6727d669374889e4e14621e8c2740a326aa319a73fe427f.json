{"ast":null,"code":"// src/router/index.js\n\nimport { createRouter, createWebHistory } from 'vue-router';\nimport HomePage from '../views/HomePage.vue'; // Ensure the paths are correct\nimport AboutPage from '../views/AboutPage.vue'; // Ensure the paths are correct\nimport HospitalForm from '../views/HospitalForm.vue'; // Import HospitalForm component\nimport ConfirmForm from '../views/ConfirmForm.vue';\nimport HospitalList from '@/views/HospitalList.vue';\nimport EditForm from '../views/EditForm.vue';\nimport RidesToday from '../views/RidesToday.vue';\nimport AdminDashboard from '@/views/AdminDashboard.vue';\nimport BusSchedules from '@/views/BusSchedules.vue';\nimport TaxiUsers from '@/views/TaxiUsers.vue';\nimport RegisteredRides from '@/views/RegisteredRides.vue';\nimport DriverView from '@/views/DriverView.vue';\nimport TranslatorView from '@/views/TranslatorView.vue';\nimport axios from 'axios';\nconst routes = [{\n  path: '/',\n  name: 'HomePage',\n  component: HomePage // Reference the correct component\n}, {\n  path: '/hospitals',\n  name: 'HospitalList',\n  component: HospitalList\n}, {\n  path: '/hospital/:id',\n  // Dynamic route for HospitalForm with :id as a parameter\n  name: 'HospitalForm',\n  component: HospitalForm,\n  props: true // Pass the route parameters as props to the component\n}, {\n  path: '/confirm',\n  name: 'ConfirmForm',\n  component: ConfirmForm,\n  props: route => ({\n    formData: route.params.formData,\n    busTime: route.params.busTime\n  })\n}, {\n  path: '/rides-today',\n  name: 'RidesToday',\n  component: RidesToday\n}, {\n  path: '/edit/:userId',\n  name: 'EditForm',\n  component: EditForm,\n  props: true // Pass the userId as a prop to EditForm\n}, {\n  path: '/about',\n  name: 'AboutPage',\n  component: AboutPage // Reference the correct component\n}, {\n  path: '/dashboard',\n  name: 'AdminDashboard',\n  component: AdminDashboard,\n  meta: {\n    requiresStaff: true\n  } // Mark this route as restricted\n}, {\n  path: '/rides-today',\n  name: 'RidesToday',\n  component: RidesToday\n}, {\n  path: '/bus-schedules',\n  name: 'BusSchedules',\n  component: BusSchedules\n}, {\n  path: '/taxi-users',\n  name: 'TaxiUsers',\n  component: TaxiUsers\n}, {\n  path: '/translators',\n  name: 'TranslatorView',\n  component: TranslatorView\n}, {\n  path: '/registered-rides',\n  name: 'RegisteredRides',\n  component: RegisteredRides\n}, {\n  path: '/driver-view',\n  name: 'DriverView',\n  component: DriverView\n}];\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n});\nrouter.beforeEach(async (to, from, next) => {\n  if (to.matched.some(record => record.meta.requiresStaff)) {\n    try {\n      // Fetch user information from the backend (you may need to adjust the endpoint)\n      const response = await axios.get('http://localhost:8000/api/userinfo/');\n      const userInfo = response.data;\n      if (userInfo.is_staff) {\n        // Proceed to the restricted route if the user is a staff member\n        next();\n      } else {\n        // Redirect non-staff members to the home page or show an error\n        next({\n          name: 'HomePage'\n        });\n      }\n    } catch (error) {\n      // If there is an error (e.g., the user is not authenticated), redirect to login or home\n      next({\n        name: 'HomePage'\n      });\n    }\n  } else {\n    // Proceed normally if the route does not require staff\n    next();\n  }\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","HomePage","AboutPage","HospitalForm","ConfirmForm","HospitalList","EditForm","RidesToday","AdminDashboard","BusSchedules","TaxiUsers","RegisteredRides","DriverView","TranslatorView","axios","routes","path","name","component","props","route","formData","params","busTime","meta","requiresStaff","router","history","process","env","BASE_URL","beforeEach","to","from","next","matched","some","record","response","get","userInfo","data","is_staff","error"],"sources":["/home/peter/projects/bus-frontend/src/router/index.js"],"sourcesContent":["// src/router/index.js\n\nimport { createRouter, createWebHistory } from 'vue-router';\nimport HomePage from '../views/HomePage.vue';  // Ensure the paths are correct\nimport AboutPage from '../views/AboutPage.vue'; // Ensure the paths are correct\nimport HospitalForm from '../views/HospitalForm.vue'; // Import HospitalForm component\nimport ConfirmForm from '../views/ConfirmForm.vue';\nimport HospitalList from '@/views/HospitalList.vue';\nimport EditForm from '../views/EditForm.vue';\nimport RidesToday from '../views/RidesToday.vue';\nimport AdminDashboard from '@/views/AdminDashboard.vue';\nimport BusSchedules from '@/views/BusSchedules.vue';\nimport TaxiUsers from '@/views/TaxiUsers.vue';\nimport RegisteredRides from '@/views/RegisteredRides.vue';\nimport DriverView from '@/views/DriverView.vue';\nimport TranslatorView from '@/views/TranslatorView.vue';\nimport axios from 'axios';\n\n\nconst routes = [\n  {\n    path: '/',\n    name: 'HomePage',\n    component: HomePage, // Reference the correct component\n  },\n  {\n    path: '/hospitals',\n    name: 'HospitalList',\n    component: HospitalList,\n  },\n  {\n    path: '/hospital/:id', // Dynamic route for HospitalForm with :id as a parameter\n    name: 'HospitalForm',\n    component: HospitalForm,\n    props: true, // Pass the route parameters as props to the component\n  },\n  {\n  path: '/confirm',\n  name: 'ConfirmForm',\n  component: ConfirmForm,\n  props: route => ({\n    formData: route.params.formData,\n    busTime: route.params.busTime\n  })\n  },\n  {\n    path: '/rides-today',\n    name: 'RidesToday',\n    component: RidesToday,\n  },\n  {\n    path: '/edit/:userId',\n    name: 'EditForm',\n    component: EditForm,\n    props: true  // Pass the userId as a prop to EditForm\n  },\n  {\n    path: '/about',\n    name: 'AboutPage',\n    component: AboutPage, // Reference the correct component\n  },\n  {\n    path: '/dashboard',\n    name: 'AdminDashboard',\n    component: AdminDashboard,\n    meta: { requiresStaff: true },  // Mark this route as restricted\n\n  },\n  {\n    path: '/rides-today',\n    name: 'RidesToday',\n    component: RidesToday\n  },\n  {\n    path: '/bus-schedules',\n    name: 'BusSchedules',\n    component: BusSchedules\n  },\n  {\n    path: '/taxi-users',\n    name: 'TaxiUsers',\n    component: TaxiUsers\n  },\n  {\n    path: '/translators',\n    name: 'TranslatorView',\n    component: TranslatorView\n  },\n  {\n    path: '/registered-rides',\n    name: 'RegisteredRides',\n    component: RegisteredRides\n  },\n  {\n    path: '/driver-view',\n    name: 'DriverView',\n    component: DriverView\n  }\n];\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes,\n});\n\nrouter.beforeEach(async (to, from, next) => {\n  if (to.matched.some(record => record.meta.requiresStaff)) {\n    try {\n      // Fetch user information from the backend (you may need to adjust the endpoint)\n      const response = await axios.get('http://localhost:8000/api/userinfo/');\n      const userInfo = response.data;\n\n      if (userInfo.is_staff) {\n        // Proceed to the restricted route if the user is a staff member\n        next();\n      } else {\n        // Redirect non-staff members to the home page or show an error\n        next({ name: 'HomePage' });\n      }\n    } catch (error) {\n      // If there is an error (e.g., the user is not authenticated), redirect to login or home\n      next({ name: 'HomePage' });\n    }\n  } else {\n    // Proceed normally if the route does not require staff\n    next();\n  }\n});\n\nexport default router;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}