{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-57ba0680\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"taxi-users-container container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Patients requiring taxis\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"table is-fullwidth\"\n};\nconst _hoisted_4 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"table\", _hoisted_3, [_createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, _toDisplayString(_ctx.$t(\"confirm.name\")), 1 /* TEXT */), _createElementVNode(\"th\", null, _toDisplayString(_ctx.$t(\"confirm.phone\")), 1 /* TEXT */), _createElementVNode(\"th\", null, _toDisplayString(_ctx.$t(\"confirm.appDate\")), 1 /* TEXT */), _createElementVNode(\"th\", null, _toDisplayString(_ctx.$t(\"confirm.appTime\")), 1 /* TEXT */), _createElementVNode(\"th\", null, _toDisplayString(_ctx.$t(\"confirm.hospital\")), 1 /* TEXT */), _createElementVNode(\"th\", null, _toDisplayString(_ctx.$t(\"confirm.department\")), 1 /* TEXT */), _createElementVNode(\"th\", null, _toDisplayString(_ctx.$t(\"confirm.hasTaxi\")), 1 /* TEXT */), _createCommentVNode(\" Column for taxi status \"), _createElementVNode(\"th\", null, _toDisplayString(_ctx.$t(\"confirm.orderTaxi\")), 1 /* TEXT */), _createCommentVNode(\" Button to order a taxi \")])]), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.patients, patient => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: patient.id,\n      class: _normalizeClass({\n        'has-taxi': patient.has_taxi\n      })\n    }, [_createElementVNode(\"td\", null, _toDisplayString(patient.name), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(patient.phone_no), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString($options.formatDate(patient.appointment_date)), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString($options.formatTime(patient.appointment_time)), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(patient.hospital_name), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(patient.department), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(patient.has_taxi ? _ctx.$t('yes') : _ctx.$t('no')), 1 /* TEXT */), _createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n      onClick: $event => $options.toggleTaxi(patient),\n      class: _normalizeClass(['button', patient.has_taxi ? 'is-success' : 'is-warning'])\n    }, _toDisplayString(patient.has_taxi ? _ctx.$t('cancelTaxi') : _ctx.$t('orderTaxi')), 11 /* TEXT, CLASS, PROPS */, _hoisted_4)])], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_toDisplayString","_ctx","$t","_createCommentVNode","_Fragment","_renderList","$data","patients","patient","key","id","_normalizeClass","has_taxi","name","phone_no","$options","formatDate","appointment_date","formatTime","appointment_time","hospital_name","department","onClick","$event","toggleTaxi","_hoisted_4"],"sources":["/home/peter/projects/bus-frontend/src/views/TaxiUsers.vue"],"sourcesContent":["<template>\n    <div class=\"taxi-users-container container\">\n        <h2>Patients requiring taxis</h2>\n        <table class=\"table is-fullwidth\">\n            <thead>\n                <tr>\n                    <th>{{ $t(\"confirm.name\") }}</th>\n                    <th>{{ $t(\"confirm.phone\") }}</th>\n                    <th>{{ $t(\"confirm.appDate\") }}</th>\n                    <th>{{ $t(\"confirm.appTime\") }}</th>\n                    <th>{{ $t(\"confirm.hospital\") }}</th>\n                    <th>{{ $t(\"confirm.department\") }}</th>\n                    <th>{{ $t(\"confirm.hasTaxi\") }}</th> <!-- Column for taxi status -->\n                    <th>{{ $t(\"confirm.orderTaxi\") }}</th> <!-- Button to order a taxi -->\n                </tr>\n            </thead>\n            <tbody>\n                <tr v-for=\"patient in patients\" :key=\"patient.id\" :class=\"{ 'has-taxi': patient.has_taxi }\">\n                    <td>{{ patient.name }}</td>\n                    <td>{{ patient.phone_no }}</td>\n                    <td>{{ formatDate(patient.appointment_date) }}</td>\n                    <td>{{ formatTime(patient.appointment_time) }}</td>\n                    <td>{{ patient.hospital_name }}</td>\n                    <td>{{ patient.department }}</td>\n                    <td>{{ patient.has_taxi ? $t('yes') : $t('no') }}</td>\n                    <td>\n                        <button @click=\"toggleTaxi(patient)\"\n                            :class=\"['button', patient.has_taxi ? 'is-success' : 'is-warning']\">\n                            {{ patient.has_taxi ? $t('cancelTaxi') : $t('orderTaxi') }}\n                        </button>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n    data() {\n        return {\n            patients: []\n        };\n    },\n    computed: {\n        sortedPatients() {\n            return [...this.patients].sort((a, b) => {\n                const dateA = new Date(a.appointment_date);\n                const dateB = new Date(b.appointment_date);\n                if (dateA !== dateB) return dateA - dateB;\n\n                const timeA = new Date(`1970-01-01T${a.appointment_time}`);\n                const timeB = new Date(`1970-01-01T${b.appointment_time}`);\n                return timeA - timeB;\n            });\n        }\n    },\n    mounted() {\n        this.fetchPatients();\n    },\n    methods: {\n        async fetchPatients() {\n            try {\n                const response = await axios.get('http://localhost:8000/api/patients/taxi-users/');\n                console.log(response.data);\n                this.patients = response.data;\n            } catch (error) {\n                console.error('Error fetching patients:', error);\n            }\n        },\n        async toggleTaxi(patient) {\n            try {\n                // Toggle the taxi status via the API\n                const response = await axios.patch(`http://localhost:8000/api/patients/${patient.id}/toggle-taxi`);\n\n                // Update the local data based on the response from the server\n                patient.has_taxi = response.data.has_taxi;\n            } catch (error) {\n                console.error('Error toggling taxi status:', error);\n            }\n        },\n\n        formatDate(date) {\n            const options = { day: '2-digit', month: '2-digit', year: 'numeric' };\n            return new Date(date).toLocaleDateString('en-GB', options);\n        },\n        formatTime(time) {\n            return time ? time.substring(0, 5) : '';\n        },\n        formatBoolean(value) {\n            const locale = this.$i18n.locale; // Get current locale\n\n            if (locale === 'da') {\n                // Danish translations\n                return value ? 'Ja' : 'Nej';\n            } else if (locale === 'gl') {\n                // Kalaallisut translations\n                return value ? 'Aap' : 'Naamik';\n            }\n            return value ? 'yes' : 'no'; // Fallback for other locales\n        }\n    }\n};\n</script>\n\n<style scoped>\n.taxi-users-container {\n    padding: 20px;\n}\n\n.table {\n    margin-top: 20px;\n}\n\n.has-taxi {\n    background-color: #9fffcb;\n    /* Green background for patients with taxi ordered */\n}\n\n.table td,\n.table th {\n    text-align: center;\n}\n</style>\n"],"mappings":";;;EACSA,KAAK,EAAC;AAAgC;gEACvCC,mBAAA,CAAiC,YAA7B,0BAAwB;;EACrBD,KAAK,EAAC;AAAoB;mBAHzC;;uBACIE,mBAAA,CAiCM,OAjCNC,UAiCM,GAhCFC,UAAiC,EACjCH,mBAAA,CA8BQ,SA9BRI,UA8BQ,GA7BJJ,mBAAA,CAWQ,gBAVJA,mBAAA,CASK,aARDA,mBAAA,CAAiC,YAAAK,gBAAA,CAA1BC,IAAA,CAAAC,EAAE,kCACTP,mBAAA,CAAkC,YAAAK,gBAAA,CAA3BC,IAAA,CAAAC,EAAE,mCACTP,mBAAA,CAAoC,YAAAK,gBAAA,CAA7BC,IAAA,CAAAC,EAAE,qCACTP,mBAAA,CAAoC,YAAAK,gBAAA,CAA7BC,IAAA,CAAAC,EAAE,qCACTP,mBAAA,CAAqC,YAAAK,gBAAA,CAA9BC,IAAA,CAAAC,EAAE,sCACTP,mBAAA,CAAuC,YAAAK,gBAAA,CAAhCC,IAAA,CAAAC,EAAE,wCACTP,mBAAA,CAAoC,YAAAK,gBAAA,CAA7BC,IAAA,CAAAC,EAAE,qCAA4BC,mBAAA,4BAA+B,EACpER,mBAAA,CAAsC,YAAAK,gBAAA,CAA/BC,IAAA,CAAAC,EAAE,uCAA8BC,mBAAA,4BAA+B,C,KAG9ER,mBAAA,CAgBQ,iB,kBAfJC,mBAAA,CAcKQ,SAAA,QA/BrBC,WAAA,CAiBsCC,KAAA,CAAAC,QAAQ,EAAnBC,OAAO;yBAAlBZ,mBAAA,CAcK;MAd4Ba,GAAG,EAAED,OAAO,CAACE,EAAE;MAAGhB,KAAK,EAjBxEiB,eAAA;QAAA,YAiBwFH,OAAO,CAACI;MAAQ;QACpFjB,mBAAA,CAA2B,YAAAK,gBAAA,CAApBQ,OAAO,CAACK,IAAI,kBACnBlB,mBAAA,CAA+B,YAAAK,gBAAA,CAAxBQ,OAAO,CAACM,QAAQ,kBACvBnB,mBAAA,CAAmD,YAAAK,gBAAA,CAA5Ce,QAAA,CAAAC,UAAU,CAACR,OAAO,CAACS,gBAAgB,mBAC1CtB,mBAAA,CAAmD,YAAAK,gBAAA,CAA5Ce,QAAA,CAAAG,UAAU,CAACV,OAAO,CAACW,gBAAgB,mBAC1CxB,mBAAA,CAAoC,YAAAK,gBAAA,CAA7BQ,OAAO,CAACY,aAAa,kBAC5BzB,mBAAA,CAAiC,YAAAK,gBAAA,CAA1BQ,OAAO,CAACa,UAAU,kBACzB1B,mBAAA,CAAsD,YAAAK,gBAAA,CAA/CQ,OAAO,CAACI,QAAQ,GAAGX,IAAA,CAAAC,EAAE,UAAUD,IAAA,CAAAC,EAAE,wBACxCP,mBAAA,CAKK,aAJDA,mBAAA,CAGS;MAHA2B,OAAK,EAAAC,MAAA,IAAER,QAAA,CAAAS,UAAU,CAAChB,OAAO;MAC7Bd,KAAK,EA3BlCiB,eAAA,YA2B+CH,OAAO,CAACI,QAAQ;wBAChCJ,OAAO,CAACI,QAAQ,GAAGX,IAAA,CAAAC,EAAE,iBAAiBD,IAAA,CAAAC,EAAE,6CA5BvEuB,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}