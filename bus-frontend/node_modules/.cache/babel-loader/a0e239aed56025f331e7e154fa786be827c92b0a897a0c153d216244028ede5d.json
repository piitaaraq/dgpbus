{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-3fceb093\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"breadcrumb\",\n  \"aria-label\": \"breadcrumbs\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"nav\", _hoisted_1, [_createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.breadcrumbs, (crumb, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index\n    }, [_createVNode(_component_router_link, {\n      to: crumb.link\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.$t(`breadcrumbs.${crumb.name}`)), 1 /* TEXT */)]),\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"to\"])]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_Fragment","_renderList","$options","breadcrumbs","crumb","index","key","_createVNode","_component_router_link","to","link","default","_withCtx","_createTextVNode","_toDisplayString","_ctx","$t","name","_"],"sources":["/home/peter/projects/bus-frontend/src/components/BreadCrumb.vue"],"sourcesContent":["<!-- Breadcrumb.vue -->\n<template>\n    <nav class=\"breadcrumb\" aria-label=\"breadcrumbs\">\n        <ul>\n            <li v-for=\"(crumb, index) in breadcrumbs\" :key=\"index\">\n                <router-link :to=\"crumb.link\">{{ $t(`breadcrumbs.${crumb.name}`) }}</router-link>\n            </li>\n        </ul>\n    </nav>\n</template>\n\n<script>\nexport default {\n    computed: {\n        breadcrumbs() {\n            const route = this.$route;  // Get the current route\n            const crumbs = [];\n\n            // Generate breadcrumb logic from the matched route\n            route.matched.forEach((match) => {\n                crumbs.push({\n                    path: match.path,\n                    label: match.meta.breadcrumb || match.name || 'Home',  // Use meta field for label or fallback to name\n                });\n            });\n\n            return crumbs;\n        }\n    }\n};\n</script>\n\n<style scoped>\n.breadcrumb {\n    margin-bottom: 1rem;\n}\n</style>\n"],"mappings":";;;EAESA,KAAK,EAAC,YAAY;EAAC,YAAU,EAAC;;;;uBAAnCC,mBAAA,CAMM,OANNC,UAMM,GALFC,mBAAA,CAIK,c,kBAHDF,mBAAA,CAEKG,SAAA,QANjBC,WAAA,CAIyCC,QAAA,CAAAC,WAAW,EAJpD,CAIwBC,KAAK,EAAEC,KAAK;yBAAxBR,mBAAA,CAEK;MAFsCS,GAAG,EAAED;IAAK,IACjDE,YAAA,CAAiFC,sBAAA;MAAnEC,EAAE,EAAEL,KAAK,CAACM;;MALxCC,OAAA,EAAAC,QAAA,CAK8C,MAAqC,CALnFC,gBAAA,CAAAC,gBAAA,CAKiDC,IAAA,CAAAC,EAAE,gBAAgBZ,KAAK,CAACa,IAAI,oB;MAL7EC,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}