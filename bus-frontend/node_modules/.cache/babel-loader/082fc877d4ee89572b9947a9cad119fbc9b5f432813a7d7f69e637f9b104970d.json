{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      patients: [] // All patients\n    };\n  },\n  computed: {\n    todaysPatients() {\n      const today = new Date().toISOString().slice(0, 10); // Get today's date in YYYY-MM-DD format\n      return this.patients.filter(patient => patient.appointment_date === today);\n    },\n    tomorrowsPatients() {\n      const tomorrow = new Date();\n      tomorrow.setDate(tomorrow.getDate() + 1); // Get tomorrow's date\n      const tomorrowStr = tomorrow.toISOString().slice(0, 10); // Format as YYYY-MM-DD\n      return this.patients.filter(patient => patient.appointment_date === tomorrowStr);\n    }\n  },\n  mounted() {\n    this.fetchPatients();\n  },\n  methods: {\n    async fetchPatients() {\n      try {\n        const response = await axios.get('http://localhost:8000/api/patients/taxi-users/');\n        this.patients = response.data;\n      } catch (error) {\n        console.error('Error fetching patients:', error);\n      }\n    },\n    async toggleTaxi(patient) {\n      try {\n        const response = await axios.patch(`http://localhost:8000/api/patients/${patient.id}/toggle-taxi/`);\n        patient.has_taxi = response.data.has_taxi;\n      } catch (error) {\n        console.error('Error toggling taxi status:', error);\n      }\n    },\n    formatDate(date) {\n      const options = {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric'\n      };\n      return new Date(date).toLocaleDateString('en-GB', options);\n    },\n    formatTime(time) {\n      return time ? time.substring(0, 5) : '';\n    },\n    formatBoolean(value) {\n      const locale = this.$i18n.locale;\n      if (locale === 'da') {\n        return value ? 'Ja' : 'Nej';\n      } else if (locale === 'gl') {\n        return value ? 'Aap' : 'Naamik';\n      }\n      return value ? 'yes' : 'no';\n    }\n  }\n};","map":{"version":3,"names":["axios","data","patients","computed","todaysPatients","today","Date","toISOString","slice","filter","patient","appointment_date","tomorrowsPatients","tomorrow","setDate","getDate","tomorrowStr","mounted","fetchPatients","methods","response","get","error","console","toggleTaxi","patch","id","has_taxi","formatDate","date","options","day","month","year","toLocaleDateString","formatTime","time","substring","formatBoolean","value","locale","$i18n"],"sources":["/home/peter/projects/bus-frontend/src/views/TaxiUsers.vue"],"sourcesContent":["<template>\n    <div class=\"taxi-users-container container\">\n        <h2 class=\"title is-2\">{{ $t(\"taxi.heading\") }}</h2>\n\n        <!-- Table for today's appointments -->\n        <h3 class=\"title is-4\">{{ $t(\"taxi.today\") }}</h3>\n        <table class=\"table is-fullwidth is-striped\">\n            <thead>\n                <tr>\n                    <th>{{ $t(\"taxi.name\") }}</th>\n                    <th>{{ $t(\"taxi.phone\") }}</th>\n                    <th>{{ $t(\"taxi.appDate\") }}</th>\n                    <th>{{ $t(\"taxi.appTime\") }}</th>\n                    <th>{{ $t(\"taxi.hospital\") }}</th>\n                    <th>{{ $t(\"taxi.department\") }}</th>\n                    <th>{{ $t(\"taxi.hasTaxi\") }}</th> <!-- Column for taxi status -->\n                    <th>{{ $t(\"taxi.shiftTaxi\") }}</th> <!-- Button to order a taxi -->\n                </tr>\n            </thead>\n            <tbody>\n                <tr v-for=\"patient in todaysPatients\" :key=\"patient.id\" :class=\"{ 'has-taxi': patient.has_taxi }\">\n                    <td>{{ patient.name }}</td>\n                    <td>{{ patient.phone_no }}</td>\n                    <td>{{ formatDate(patient.appointment_date) }}</td>\n                    <td>{{ formatTime(patient.appointment_time) }}</td>\n                    <td>{{ patient.hospital_name }}</td>\n                    <td>{{ patient.department }}</td>\n                    <td>{{ formatBoolean(patient.has_taxi) }}</td>\n                    <td>\n                        <button @click=\"toggleTaxi(patient)\"\n                            :class=\"['button taxi-btn', patient.has_taxi ? 'is-warning' : 'is-success']\">\n                            {{ patient.has_taxi ? $t('taxi.cancel') : $t('taxi.order') }}\n                        </button>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n\n        <!-- Table for tomorrow's appointments -->\n        <h3 class=\"title is-4\">{{ $t(\"taxi.tomorrow\") }}</h3>\n        <table class=\"table is-fullwidth is-striped\">\n            <thead>\n                <tr>\n                    <th>{{ $t(\"taxi.name\") }}</th>\n                    <th>{{ $t(\"taxi.phone\") }}</th>\n                    <th>{{ $t(\"taxi.appDate\") }}</th>\n                    <th>{{ $t(\"taxi.appTime\") }}</th>\n                    <th>{{ $t(\"taxi.hospital\") }}</th>\n                    <th>{{ $t(\"taxi.department\") }}</th>\n                    <th>{{ $t(\"taxi.hasTaxi\") }}</th> <!-- Column for taxi status -->\n                    <th>{{ $t(\"taxi.shiftTaxi\") }}</th> <!-- Button to order a taxi -->\n                </tr>\n            </thead>\n            <tbody>\n                <tr v-for=\"patient in tomorrowsPatients\" :key=\"patient.id\" :class=\"{ 'has-taxi': patient.has_taxi }\">\n                    <td>{{ patient.name }}</td>\n                    <td>{{ patient.phone_no }}</td>\n                    <td>{{ formatDate(patient.appointment_date) }}</td>\n                    <td>{{ formatTime(patient.appointment_time) }}</td>\n                    <td>{{ patient.hospital_name }}</td>\n                    <td>{{ patient.department }}</td>\n                    <td>{{ formatBoolean(patient.has_taxi) }}</td>\n                    <td>\n                        <button @click=\"toggleTaxi(patient)\"\n                            :class=\"['button taxi-btn', patient.has_taxi ? 'is-warning' : 'is-success']\">\n                            {{ patient.has_taxi ? $t('taxi.cancel') : $t('taxi.order') }}\n                        </button>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n    data() {\n        return {\n            patients: []  // All patients\n        };\n    },\n    computed: {\n        todaysPatients() {\n            const today = new Date().toISOString().slice(0, 10);  // Get today's date in YYYY-MM-DD format\n            return this.patients.filter(patient => patient.appointment_date === today);\n        },\n        tomorrowsPatients() {\n            const tomorrow = new Date();\n            tomorrow.setDate(tomorrow.getDate() + 1);  // Get tomorrow's date\n            const tomorrowStr = tomorrow.toISOString().slice(0, 10);  // Format as YYYY-MM-DD\n            return this.patients.filter(patient => patient.appointment_date === tomorrowStr);\n        }\n    },\n    mounted() {\n        this.fetchPatients();\n    },\n    methods: {\n        async fetchPatients() {\n            try {\n                const response = await axios.get('http://localhost:8000/api/patients/taxi-users/');\n                this.patients = response.data;\n            } catch (error) {\n                console.error('Error fetching patients:', error);\n            }\n        },\n        async toggleTaxi(patient) {\n            try {\n                const response = await axios.patch(`http://localhost:8000/api/patients/${patient.id}/toggle-taxi/`);\n                patient.has_taxi = response.data.has_taxi;\n            } catch (error) {\n                console.error('Error toggling taxi status:', error);\n            }\n        },\n        formatDate(date) {\n            const options = { day: '2-digit', month: '2-digit', year: 'numeric' };\n            return new Date(date).toLocaleDateString('en-GB', options);\n        },\n        formatTime(time) {\n            return time ? time.substring(0, 5) : '';\n        },\n        formatBoolean(value) {\n            const locale = this.$i18n.locale;\n            if (locale === 'da') {\n                return value ? 'Ja' : 'Nej';\n            } else if (locale === 'gl') {\n                return value ? 'Aap' : 'Naamik';\n            }\n            return value ? 'yes' : 'no';\n        }\n    }\n};\n</script>\n\n<style scoped>\n.taxi-users-container {\n    padding: 20px;\n}\n\n.table {\n    margin-top: 20px;\n}\n\n.has-taxi {\n    background-color: lightgray;\n}\n\n.taxi-btn {\n    width: 100px;\n}\n</style>\n"],"mappings":"AA2EA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACXC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,QAAQ,EAAE,EAAC,CAAG;IAClB,CAAC;EACL,CAAC;EACDC,QAAQ,EAAE;IACNC,cAAcA,CAAA,EAAG;MACb,MAAMC,KAAI,GAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,EAAG;MACtD,OAAO,IAAI,CAACN,QAAQ,CAACO,MAAM,CAACC,OAAM,IAAKA,OAAO,CAACC,gBAAe,KAAMN,KAAK,CAAC;IAC9E,CAAC;IACDO,iBAAiBA,CAAA,EAAG;MAChB,MAAMC,QAAO,GAAI,IAAIP,IAAI,CAAC,CAAC;MAC3BO,QAAQ,CAACC,OAAO,CAACD,QAAQ,CAACE,OAAO,CAAC,IAAI,CAAC,CAAC,EAAG;MAC3C,MAAMC,WAAU,GAAIH,QAAQ,CAACN,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,EAAG;MAC1D,OAAO,IAAI,CAACN,QAAQ,CAACO,MAAM,CAACC,OAAM,IAAKA,OAAO,CAACC,gBAAe,KAAMK,WAAW,CAAC;IACpF;EACJ,CAAC;EACDC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACC,aAAa,CAAC,CAAC;EACxB,CAAC;EACDC,OAAO,EAAE;IACL,MAAMD,aAAaA,CAAA,EAAG;MAClB,IAAI;QACA,MAAME,QAAO,GAAI,MAAMpB,KAAK,CAACqB,GAAG,CAAC,gDAAgD,CAAC;QAClF,IAAI,CAACnB,QAAO,GAAIkB,QAAQ,CAACnB,IAAI;MACjC,EAAE,OAAOqB,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MACpD;IACJ,CAAC;IACD,MAAME,UAAUA,CAACd,OAAO,EAAE;MACtB,IAAI;QACA,MAAMU,QAAO,GAAI,MAAMpB,KAAK,CAACyB,KAAK,CAAC,sCAAsCf,OAAO,CAACgB,EAAE,eAAe,CAAC;QACnGhB,OAAO,CAACiB,QAAO,GAAIP,QAAQ,CAACnB,IAAI,CAAC0B,QAAQ;MAC7C,EAAE,OAAOL,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACvD;IACJ,CAAC;IACDM,UAAUA,CAACC,IAAI,EAAE;MACb,MAAMC,OAAM,GAAI;QAAEC,GAAG,EAAE,SAAS;QAAEC,KAAK,EAAE,SAAS;QAAEC,IAAI,EAAE;MAAU,CAAC;MACrE,OAAO,IAAI3B,IAAI,CAACuB,IAAI,CAAC,CAACK,kBAAkB,CAAC,OAAO,EAAEJ,OAAO,CAAC;IAC9D,CAAC;IACDK,UAAUA,CAACC,IAAI,EAAE;MACb,OAAOA,IAAG,GAAIA,IAAI,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE;IAC3C,CAAC;IACDC,aAAaA,CAACC,KAAK,EAAE;MACjB,MAAMC,MAAK,GAAI,IAAI,CAACC,KAAK,CAACD,MAAM;MAChC,IAAIA,MAAK,KAAM,IAAI,EAAE;QACjB,OAAOD,KAAI,GAAI,IAAG,GAAI,KAAK;MAC/B,OAAO,IAAIC,MAAK,KAAM,IAAI,EAAE;QACxB,OAAOD,KAAI,GAAI,KAAI,GAAI,QAAQ;MACnC;MACA,OAAOA,KAAI,GAAI,KAAI,GAAI,IAAI;IAC/B;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}