{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      schedules: [],\n      departureLocation1Schedules: [],\n      departureLocation2Schedules: [],\n      daysOfWeek: ['Mandag', 'Tirsdag', 'Onsdag', 'Torsdag', 'Fredag'] // Days of the week in order\n    };\n  },\n  computed: {\n    sortedDaysOfWeek() {\n      return this.daysOfWeek;\n    }\n  },\n  mounted() {\n    this.fetchSchedules();\n  },\n  methods: {\n    async fetchSchedules() {\n      try {\n        const response = await axios.get('http://localhost:8000/api/schedules/');\n        this.schedules = response.data;\n\n        // Group schedules by departure location\n        this.departureLocation1Schedules = this.schedules.filter(schedule => schedule.departure_location === 'Patienthjemmet');\n        this.departureLocation2Schedules = this.schedules.filter(schedule => schedule.departure_location === 'Rigshospitalet');\n      } catch (error) {\n        console.error('Error fetching bus schedules:', error);\n      }\n    },\n    groupedSchedules(schedules) {\n      // Group schedules by departure_time with keys for each day_of_week\n      const scheduleMap = {};\n      schedules.forEach(schedule => {\n        const time = schedule.departure_time;\n        if (!scheduleMap[time]) {\n          scheduleMap[time] = {};\n        }\n        scheduleMap[time][schedule.day_of_week] = time;\n      });\n      return Object.values(scheduleMap);\n    },\n    sortedGroupedSchedules(schedules) {\n      // Sort schedules first by day of the week and then by time\n      const grouped = this.groupedSchedules(schedules);\n      return grouped.sort((a, b) => {\n        const timeA = Object.values(a).find(val => val) || '00:00:00'; // Fallback time if empty\n        const timeB = Object.values(b).find(val => val) || '00:00:00';\n\n        // Sort by time\n        return new Date(`1970-01-01T${timeA}`) - new Date(`1970-01-01T${timeB}`);\n      });\n    },\n    formatTime(time) {\n      if (!time) return null;\n\n      // Convert time string to Date and format as HH:MM\n      const date = new Date(`1970-01-01T${time}`);\n      return date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","schedules","departureLocation1Schedules","departureLocation2Schedules","daysOfWeek","computed","sortedDaysOfWeek","mounted","fetchSchedules","methods","response","get","filter","schedule","departure_location","error","console","groupedSchedules","scheduleMap","forEach","time","departure_time","day_of_week","Object","values","sortedGroupedSchedules","grouped","sort","a","b","timeA","find","val","timeB","Date","formatTime","date","toLocaleTimeString","hour","minute"],"sources":["/home/peter/projects/bus-frontend/src/views/BusSchedules.vue"],"sourcesContent":["<template>\n    <div class=\"bus-schedules-container container\">\n        <h2 class=\"title is-2\">{{ $t(\"schedules.heading\") }}</h2>\n\n        <!-- Table for Departure Location 1 (Patienthjemmet) -->\n        <div v-if=\"departureLocation1Schedules.length\">\n            <h3 class=\"title is-3\">{{ $t(\"schedules.toRiget\") }}</h3>\n            <table class=\"table is-fullwidth is-striped mb-5\">\n                <thead>\n                    <tr>\n                        <th v-for=\"day in sortedDaysOfWeek\" :key=\"day\">{{ $t(`days.${day}`) }}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr v-for=\"times in sortedGroupedSchedules(departureLocation1Schedules)\" :key=\"times.id\">\n                        <td v-for=\"day in sortedDaysOfWeek\" :key=\"day\">{{ formatTime(times[day]) || '-' }}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n\n        <!-- Table for Departure Location 2 (Rigshospitalet) -->\n        <div v-if=\"departureLocation2Schedules.length\">\n            <h3 class=\"title is-3\">{{ $t(\"schedules.toDgp\") }}</h3>\n            <table class=\"table is-fullwidth is-striped\">\n                <thead>\n                    <tr>\n                        <th v-for=\"day in sortedDaysOfWeek\" :key=\"day\">{{ $t(`days.${day}`) }}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr v-for=\"times in sortedGroupedSchedules(departureLocation2Schedules)\" :key=\"times.id\">\n                        <td v-for=\"day in sortedDaysOfWeek\" :key=\"day\">{{ formatTime(times[day]) || '-' }}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n    data() {\n        return {\n            schedules: [],\n            departureLocation1Schedules: [],\n            departureLocation2Schedules: [],\n            daysOfWeek: ['Mandag', 'Tirsdag', 'Onsdag', 'Torsdag', 'Fredag'], // Days of the week in order\n        };\n    },\n    computed: {\n        sortedDaysOfWeek() {\n            return this.daysOfWeek;\n        }\n    },\n    mounted() {\n        this.fetchSchedules();\n    },\n    methods: {\n        async fetchSchedules() {\n            try {\n                const response = await axios.get('http://localhost:8000/api/schedules/');\n                this.schedules = response.data;\n\n                // Group schedules by departure location\n                this.departureLocation1Schedules = this.schedules.filter(\n                    schedule => schedule.departure_location === 'Patienthjemmet'\n                );\n                this.departureLocation2Schedules = this.schedules.filter(\n                    schedule => schedule.departure_location === 'Rigshospitalet'\n                );\n            } catch (error) {\n                console.error('Error fetching bus schedules:', error);\n            }\n        },\n        groupedSchedules(schedules) {\n            // Group schedules by departure_time with keys for each day_of_week\n            const scheduleMap = {};\n\n            schedules.forEach(schedule => {\n                const time = schedule.departure_time;\n                if (!scheduleMap[time]) {\n                    scheduleMap[time] = {};\n                }\n                scheduleMap[time][schedule.day_of_week] = time;\n            });\n\n            return Object.values(scheduleMap);\n        },\n        sortedGroupedSchedules(schedules) {\n            // Sort schedules first by day of the week and then by time\n            const grouped = this.groupedSchedules(schedules);\n\n            return grouped.sort((a, b) => {\n                const timeA = Object.values(a).find(val => val) || '00:00:00'; // Fallback time if empty\n                const timeB = Object.values(b).find(val => val) || '00:00:00';\n\n                // Sort by time\n                return new Date(`1970-01-01T${timeA}`) - new Date(`1970-01-01T${timeB}`);\n            });\n        },\n        formatTime(time) {\n            if (!time) return null;\n\n            // Convert time string to Date and format as HH:MM\n            const date = new Date(`1970-01-01T${time}`);\n            return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n        },\n    },\n};\n</script>\n\n<style scoped>\n.bus-schedules-container {\n    padding: 20px;\n}\n\n.table {\n    margin-top: 20px;\n}\n</style>\n"],"mappings":"AAyCA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACXC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,SAAS,EAAE,EAAE;MACbC,2BAA2B,EAAE,EAAE;MAC/BC,2BAA2B,EAAE,EAAE;MAC/BC,UAAU,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAE;IACtE,CAAC;EACL,CAAC;EACDC,QAAQ,EAAE;IACNC,gBAAgBA,CAAA,EAAG;MACf,OAAO,IAAI,CAACF,UAAU;IAC1B;EACJ,CAAC;EACDG,OAAOA,CAAA,EAAG;IACN,IAAI,CAACC,cAAc,CAAC,CAAC;EACzB,CAAC;EACDC,OAAO,EAAE;IACL,MAAMD,cAAcA,CAAA,EAAG;MACnB,IAAI;QACA,MAAME,QAAO,GAAI,MAAMX,KAAK,CAACY,GAAG,CAAC,sCAAsC,CAAC;QACxE,IAAI,CAACV,SAAQ,GAAIS,QAAQ,CAACV,IAAI;;QAE9B;QACA,IAAI,CAACE,2BAA0B,GAAI,IAAI,CAACD,SAAS,CAACW,MAAM,CACpDC,QAAO,IAAKA,QAAQ,CAACC,kBAAiB,KAAM,gBAChD,CAAC;QACD,IAAI,CAACX,2BAA0B,GAAI,IAAI,CAACF,SAAS,CAACW,MAAM,CACpDC,QAAO,IAAKA,QAAQ,CAACC,kBAAiB,KAAM,gBAChD,CAAC;MACL,EAAE,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACzD;IACJ,CAAC;IACDE,gBAAgBA,CAAChB,SAAS,EAAE;MACxB;MACA,MAAMiB,WAAU,GAAI,CAAC,CAAC;MAEtBjB,SAAS,CAACkB,OAAO,CAACN,QAAO,IAAK;QAC1B,MAAMO,IAAG,GAAIP,QAAQ,CAACQ,cAAc;QACpC,IAAI,CAACH,WAAW,CAACE,IAAI,CAAC,EAAE;UACpBF,WAAW,CAACE,IAAI,IAAI,CAAC,CAAC;QAC1B;QACAF,WAAW,CAACE,IAAI,CAAC,CAACP,QAAQ,CAACS,WAAW,IAAIF,IAAI;MAClD,CAAC,CAAC;MAEF,OAAOG,MAAM,CAACC,MAAM,CAACN,WAAW,CAAC;IACrC,CAAC;IACDO,sBAAsBA,CAACxB,SAAS,EAAE;MAC9B;MACA,MAAMyB,OAAM,GAAI,IAAI,CAACT,gBAAgB,CAAChB,SAAS,CAAC;MAEhD,OAAOyB,OAAO,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QAC1B,MAAMC,KAAI,GAAIP,MAAM,CAACC,MAAM,CAACI,CAAC,CAAC,CAACG,IAAI,CAACC,GAAE,IAAKA,GAAG,KAAK,UAAU,EAAE;QAC/D,MAAMC,KAAI,GAAIV,MAAM,CAACC,MAAM,CAACK,CAAC,CAAC,CAACE,IAAI,CAACC,GAAE,IAAKA,GAAG,KAAK,UAAU;;QAE7D;QACA,OAAO,IAAIE,IAAI,CAAC,cAAcJ,KAAK,EAAE,IAAI,IAAII,IAAI,CAAC,cAAcD,KAAK,EAAE,CAAC;MAC5E,CAAC,CAAC;IACN,CAAC;IACDE,UAAUA,CAACf,IAAI,EAAE;MACb,IAAI,CAACA,IAAI,EAAE,OAAO,IAAI;;MAEtB;MACA,MAAMgB,IAAG,GAAI,IAAIF,IAAI,CAAC,cAAcd,IAAI,EAAE,CAAC;MAC3C,OAAOgB,IAAI,CAACC,kBAAkB,CAAC,EAAE,EAAE;QAAEC,IAAI,EAAE,SAAS;QAAEC,MAAM,EAAE;MAAU,CAAC,CAAC;IAC9E;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}