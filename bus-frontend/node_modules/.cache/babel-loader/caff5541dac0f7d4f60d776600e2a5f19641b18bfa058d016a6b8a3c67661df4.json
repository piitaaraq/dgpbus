{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-2ef4cc40\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"rides-today-container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Today's Rides\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"table is-fullwidth\"\n};\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"Bus Time\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Name\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Room\")])], -1 /* HOISTED */));\nconst _hoisted_5 = [\"rowspan\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"table\", _hoisted_3, [_hoisted_4, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.rides, ride => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: ride.id\n    }, [_createCommentVNode(\" First row: display bus time and the first user's details \"), _createElementVNode(\"td\", {\n      rowspan: ride.users.length\n    }, _toDisplayString(ride.departure_time), 9 /* TEXT, PROPS */, _hoisted_5), _createElementVNode(\"td\", null, _toDisplayString(ride.users[0].name), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(ride.users[0].room), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.ride.users.slice(1), (user, userIndex) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: user.id\n    }, [_createCommentVNode(\" Subsequent rows: display user details only, no bus time \"), _createElementVNode(\"td\", null, _toDisplayString(user.name), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(user.room), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_Fragment","_renderList","$data","rides","ride","key","id","_createCommentVNode","rowspan","users","length","departure_time","_hoisted_5","_toDisplayString","name","room","_ctx","slice","user","userIndex"],"sources":["/home/peter/projects/bus-frontend/src/views/RidesToday.vue"],"sourcesContent":["<template>\n    <div class=\"rides-today-container\">\n        <h2>Today's Rides</h2>\n\n        <table class=\"table is-fullwidth\">\n            <thead>\n                <tr>\n                    <th>Bus Time</th>\n                    <th>Name</th>\n                    <th>Room</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr v-for=\"ride in rides\" :key=\"ride.id\">\n                    <!-- First row: display bus time and the first user's details -->\n                    <td :rowspan=\"ride.users.length\">{{ ride.departure_time }}</td>\n                    <td>{{ ride.users[0].name }}</td>\n                    <td>{{ ride.users[0].room }}</td>\n                </tr>\n                <tr v-for=\"(user, userIndex) in ride.users.slice(1)\" :key=\"user.id\">\n                    <!-- Subsequent rows: display user details only, no bus time -->\n                    <td>{{ user.name }}</td>\n                    <td>{{ user.room }}</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n    data() {\n        return {\n            rides: []\n        };\n    },\n    mounted() {\n        this.fetchRides();\n    },\n    methods: {\n        async fetchRides() {\n            try {\n                const response = await axios.get('http://localhost:8000/api/rides/today');\n                this.rides = response.data;\n            } catch (error) {\n                console.error('Error fetching rides:', error);\n            }\n        }\n    }\n};\n</script>\n\n<style scoped>\n.rides-today-container {\n    padding: 20px;\n}\n\n.table {\n    margin-top: 20px;\n}\n</style>\n"],"mappings":";;;EACSA,KAAK,EAAC;AAAuB;gEAC9BC,mBAAA,CAAsB,YAAlB,eAAa;;EAEVD,KAAK,EAAC;AAAoB;gEAC7BC,mBAAA,CAMQ,gB,aALJA,mBAAA,CAIK,a,aAHDA,mBAAA,CAAiB,YAAb,UAAQ,G,aACZA,mBAAA,CAAa,YAAT,MAAI,G,aACRA,mBAAA,CAAa,YAAT,MAAI,E;mBAT5B;;uBACIC,mBAAA,CAyBM,OAzBNC,UAyBM,GAxBFC,UAAsB,EAEtBH,mBAAA,CAqBQ,SArBRI,UAqBQ,GApBJC,UAMQ,EACRL,mBAAA,CAYQ,iB,kBAXJC,mBAAA,CAKKK,SAAA,QAlBrBC,WAAA,CAamCC,KAAA,CAAAC,KAAK,EAAbC,IAAI;yBAAfT,mBAAA,CAKK;MALsBU,GAAG,EAAED,IAAI,CAACE;QACjCC,mBAAA,8DAAiE,EACjEb,mBAAA,CAA+D;MAA1Dc,OAAO,EAAEJ,IAAI,CAACK,KAAK,CAACC;wBAAWN,IAAI,CAACO,cAAc,wBAf3EC,UAAA,GAgBoBlB,mBAAA,CAAiC,YAAAmB,gBAAA,CAA1BT,IAAI,CAACK,KAAK,IAAIK,IAAI,kBACzBpB,mBAAA,CAAiC,YAAAmB,gBAAA,CAA1BT,IAAI,CAACK,KAAK,IAAIM,IAAI,iB;qDAE7BpB,mBAAA,CAIKK,SAAA,QAvBrBC,WAAA,CAmBgDe,IAAA,CAAAZ,IAAI,CAACK,KAAK,CAACQ,KAAK,KAnBhE,CAmB4BC,IAAI,EAAEC,SAAS;yBAA3BxB,mBAAA,CAIK;MAJiDU,GAAG,EAAEa,IAAI,CAACZ;QAC5DC,mBAAA,6DAAgE,EAChEb,mBAAA,CAAwB,YAAAmB,gBAAA,CAAjBK,IAAI,CAACJ,IAAI,kBAChBpB,mBAAA,CAAwB,YAAAmB,gBAAA,CAAjBK,IAAI,CAACH,IAAI,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}