{"ast":null,"code":"// stores/auth.js\nimport { defineStore } from 'pinia';\nimport axios from 'axios';\nexport const useAuthStore = defineStore({\n  id: 'auth',\n  // Store ID\n\n  state: () => ({\n    token: localStorage.getItem('token') || null // Initialize token from localStorage\n  }),\n  getters: {\n    // Check if the user is authenticated by checking the presence of the token\n    isAuthenticated: state => !!state.token\n  },\n  actions: {\n    // Handle login and store the JWT token\n    async login(email, password) {\n      try {\n        const response = await axios.post('http://localhost:8000/api/token/', {\n          email,\n          password\n        });\n        this.token = response.data.access; // Set the JWT token in the store\n        localStorage.setItem('token', this.token); // Store token in localStorage\n      } catch (error) {\n        console.error('Login failed:', error);\n        throw new Error('Login failed. Please check your credentials.');\n      }\n    },\n    // Handle logout by clearing the token from state and localStorage\n    logout() {\n      this.token = null; // Clear the token from the store\n      localStorage.removeItem('token'); // Remove token from localStorage\n    },\n    // Restore the token from localStorage when the app is reloaded\n    restoreToken() {\n      const token = localStorage.getItem('token');\n      if (token) {\n        this.token = token; // Restore token to the store\n      }\n    }\n  }\n});","map":{"version":3,"names":["defineStore","axios","useAuthStore","id","state","token","localStorage","getItem","getters","isAuthenticated","actions","login","email","password","response","post","data","access","setItem","error","console","Error","logout","removeItem","restoreToken"],"sources":["/home/peter/projects/bus-frontend/src/stores/auth.js"],"sourcesContent":["// stores/auth.js\nimport { defineStore } from 'pinia';\nimport axios from 'axios';\n\nexport const useAuthStore = defineStore({\n  id: 'auth',  // Store ID\n\n  state: () => ({\n    token: localStorage.getItem('token') || null,  // Initialize token from localStorage\n  }),\n\n  getters: {\n    // Check if the user is authenticated by checking the presence of the token\n    isAuthenticated: (state) => !!state.token,\n  },\n\n  actions: {\n    // Handle login and store the JWT token\n    async login(email, password) {\n      try {\n        const response = await axios.post('http://localhost:8000/api/token/', {\n          email,\n          password,\n        });\n\n        this.token = response.data.access;  // Set the JWT token in the store\n        localStorage.setItem('token', this.token);  // Store token in localStorage\n      } catch (error) {\n        console.error('Login failed:', error);\n        throw new Error('Login failed. Please check your credentials.');\n      }\n    },\n\n    // Handle logout by clearing the token from state and localStorage\n    logout() {\n      this.token = null;  // Clear the token from the store\n      localStorage.removeItem('token');  // Remove token from localStorage\n    },\n\n    // Restore the token from localStorage when the app is reloaded\n    restoreToken() {\n      const token = localStorage.getItem('token');\n      if (token) {\n        this.token = token;  // Restore token to the store\n      }\n    },\n  },\n});\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,OAAO;AACnC,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,YAAY,GAAGF,WAAW,CAAC;EACtCG,EAAE,EAAE,MAAM;EAAG;;EAEbC,KAAK,EAAEA,CAAA,MAAO;IACZC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAAG;EACjD,CAAC,CAAC;EAEFC,OAAO,EAAE;IACP;IACAC,eAAe,EAAGL,KAAK,IAAK,CAAC,CAACA,KAAK,CAACC;EACtC,CAAC;EAEDK,OAAO,EAAE;IACP;IACA,MAAMC,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;MAC3B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,IAAI,CAAC,kCAAkC,EAAE;UACpEH,KAAK;UACLC;QACF,CAAC,CAAC;QAEF,IAAI,CAACR,KAAK,GAAGS,QAAQ,CAACE,IAAI,CAACC,MAAM,CAAC,CAAE;QACpCX,YAAY,CAACY,OAAO,CAAC,OAAO,EAAE,IAAI,CAACb,KAAK,CAAC,CAAC,CAAE;MAC9C,CAAC,CAAC,OAAOc,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;QACrC,MAAM,IAAIE,KAAK,CAAC,8CAA8C,CAAC;MACjE;IACF,CAAC;IAED;IACAC,MAAMA,CAAA,EAAG;MACP,IAAI,CAACjB,KAAK,GAAG,IAAI,CAAC,CAAE;MACpBC,YAAY,CAACiB,UAAU,CAAC,OAAO,CAAC,CAAC,CAAE;IACrC,CAAC;IAED;IACAC,YAAYA,CAAA,EAAG;MACb,MAAMnB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAIF,KAAK,EAAE;QACT,IAAI,CAACA,KAAK,GAAGA,KAAK,CAAC,CAAE;MACvB;IACF;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}