{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createBlock as _createBlock, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-3fceb093\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  key: 0,\n  class: \"pr-3 breadcrumb is-right is-medium has-bullet-separator\",\n  \"aria-label\": \"breadcrumbs\"\n};\nconst _hoisted_2 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return $options.breadcrumbs.length ? (_openBlock(), _createElementBlock(\"nav\", _hoisted_1, [_createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.breadcrumbs, (crumb, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      class: _normalizeClass({\n        'is-active': $options.isActive(index)\n      })\n    }, [_createCommentVNode(\" If the crumb has a link, make it clickable; otherwise, just display the name \"), crumb.link ? (_openBlock(), _createBlock(_component_router_link, {\n      key: 0,\n      to: crumb.link\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.$t(`breadcrumbs.${crumb.name}`)), 1 /* TEXT */)]),\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"to\"])) : (_openBlock(), _createElementBlock(\"span\", _hoisted_2, _toDisplayString(_ctx.$t(`breadcrumbs.${crumb.name}`)), 1 /* TEXT */))], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true);\n}","map":{"version":3,"names":["key","class","$options","breadcrumbs","length","_createElementBlock","_hoisted_1","_createElementVNode","_Fragment","_renderList","crumb","index","_normalizeClass","isActive","_createCommentVNode","link","_createBlock","_component_router_link","to","default","_withCtx","_createTextVNode","_toDisplayString","_ctx","$t","name","_","_hoisted_2"],"sources":["/home/peter/projects/bus-frontend/src/components/BreadCrumb.vue"],"sourcesContent":["<template>\n    <nav v-if=\"breadcrumbs.length\" class=\"pr-3 breadcrumb is-right is-medium has-bullet-separator\"\n        aria-label=\"breadcrumbs\">\n        <ul>\n            <li v-for=\"(crumb, index) in breadcrumbs\" :key=\"index\" :class=\"{ 'is-active': isActive(index) }\">\n                <!-- If the crumb has a link, make it clickable; otherwise, just display the name -->\n                <router-link v-if=\"crumb.link\" :to=\"crumb.link\"> {{ $t(`breadcrumbs.${crumb.name}`) }} </router-link>\n                <span v-else> {{ $t(`breadcrumbs.${crumb.name}`) }} </span>\n            </li>\n        </ul>\n    </nav>\n</template>\n\n<script>\nexport default {\n    computed: {\n        breadcrumbs() {\n            const route = this.$route;  // Get the current route\n\n            // Return the breadcrumbs from the meta field\n            return route.meta.breadcrumbs || [];\n        }\n    },\n    methods: {\n        isActive(index) {\n            // Mark the last breadcrumb as active\n            return index === this.breadcrumbs.length - 1;\n        }\n    }\n};\n</script>\n\n<style scoped>\n.breadcrumb {\n    margin-bottom: 1rem;\n}\n\n.breadcrumb ul {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n}\n\n.breadcrumb li {\n    display: inline-flex;\n    align-items: center;\n    margin-right: 0.5rem;\n    /* Adjust spacing between breadcrumb items */\n}\n\n.breadcrumb a,\n.breadcrumb span {\n    vertical-align: middle;\n    display: inline-block;\n    font-size: 1rem;\n    /* Ensures consistent text size */\n    line-height: 1.5rem;\n    /* Ensures consistent line height */\n}\n\n.breadcrumb ul {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n}\n\n.breadcrumb li {\n    display: inline-flex;\n    align-items: center;\n}\n\n.breadcrumb li::before {\n    margin-right: 0.5em;\n    /* Add space after the separator */\n}\n\n.breadcrumb li::after {\n    margin-left: 0.5em;\n    /* Add space before the separator */\n}\n\n/* Remove separator after the last breadcrumb */\n.breadcrumb li:last-child::after {\n    content: none;\n}\n\n.breadcrumb li.is-active a,\n.breadcrumb li.is-active span {\n    font-weight: bold;\n}\n</style>\n"],"mappings":";;;EAAAA,GAAA;EACmCC,KAAK,EAAC,yDAAyD;EAC1F,YAAU,EAAC;;;EAFnBD,GAAA;AAAA;;;SACeE,QAAA,CAAAC,WAAW,CAACC,MAAM,I,cAA7BC,mBAAA,CASM,OATNC,UASM,GAPFC,mBAAA,CAMK,c,kBALDF,mBAAA,CAIKG,SAAA,QARjBC,WAAA,CAIyCP,QAAA,CAAAC,WAAW,EAJpD,CAIwBO,KAAK,EAAEC,KAAK;yBAAxBN,mBAAA,CAIK;MAJsCL,GAAG,EAAEW,KAAK;MAAGV,KAAK,EAJzEW,eAAA;QAAA,aAI0FV,QAAA,CAAAW,QAAQ,CAACF,KAAK;MAAA;QACxFG,mBAAA,kFAAqF,EAClEJ,KAAK,CAACK,IAAI,I,cAA7BC,YAAA,CAAqGC,sBAAA;MANrHjB,GAAA;MAMgDkB,EAAE,EAAER,KAAK,CAACK;;MAN1DI,OAAA,EAAAC,QAAA,CAMiE,MAAqC,CANtGC,gBAAA,CAAAC,gBAAA,CAMoEC,IAAA,CAAAC,EAAE,gBAAgBd,KAAK,CAACe,IAAI,oB;MANhGC,CAAA;kEAOgBrB,mBAAA,CAA2D,QAP3EsB,UAAA,EAAAL,gBAAA,CAOiCC,IAAA,CAAAC,EAAE,gBAAgBd,KAAK,CAACe,IAAI,qB;wCAP7DX,mBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}