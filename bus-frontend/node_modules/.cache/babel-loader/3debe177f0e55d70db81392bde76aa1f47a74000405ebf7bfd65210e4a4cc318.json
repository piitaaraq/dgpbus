{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      patients: []\n    };\n  },\n  computed: {\n    // Group patients by hospital_name\n    groupedPatients() {\n      return this.patients.reduce((groups, patient) => {\n        const hospitalName = patient.hospital_name;\n        if (!groups[hospitalName]) {\n          groups[hospitalName] = [];\n        }\n        groups[hospitalName].push(patient);\n        return groups;\n      }, {});\n    }\n  },\n  methods: {\n    // Sort patients by appointment_date first, then appointment_time\n    sortedPatients(patients) {\n      return [...patients].sort((a, b) => {\n        const dateA = new Date(a.appointment_date);\n        const dateB = new Date(b.appointment_date);\n        if (dateA - dateB !== 0) {\n          return dateA - dateB; // Sort by date first\n        }\n        const timeA = new Date(`1970-01-01T${a.appointment_time}`);\n        const timeB = new Date(`1970-01-01T${b.appointment_time}`);\n        return timeA - timeB; // If dates are equal, sort by time\n      });\n    },\n    async fetchPatients() {\n      try {\n        const response = await axios.get('http://localhost:8000/api/patients/translator-view/');\n        this.patients = response.data;\n      } catch (error) {\n        console.error('Error fetching patients:', error);\n      }\n    }\n  },\n  mounted() {\n    this.fetchPatients();\n  }\n};","map":{"version":3,"names":["axios","data","patients","computed","groupedPatients","reduce","groups","patient","hospitalName","hospital_name","push","methods","sortedPatients","sort","a","b","dateA","Date","appointment_date","dateB","timeA","appointment_time","timeB","fetchPatients","response","get","error","console","mounted"],"sources":["/home/peter/projects/bus-frontend/src/views/TranslatorView.vue"],"sourcesContent":["<template>\n    <div class=\"translator-view-container container\">\n        <h2>Patienter med behov for tolk</h2>\n\n        <!-- Loop through each group of patients based on hospital -->\n        <div v-for=\"(patients, hospital) in groupedPatients\" :key=\"hospital\" class=\"hospital-section\">\n            <h3 class=\"hospital-title\">{{ hospital }}</h3>\n            <table class=\"table is-fullwidth\">\n                <thead>\n                    <tr>\n                        <th>{{ $t(\"confirm.bustime\") }}</th>\n                        <th>{{ $t(\"confirm.name\") }}</th>\n                        <th>{{ $t(\"confirm.phone\") }}</th>\n                        <th>{{ $t(\"confirm.appDate\") }}</th>\n                        <th>{{ $t(\"confirm.appTime\") }}</th>\n                        <th>{{ $t(\"confirm.department\") }}</th>\n                        <th>{{ $t(\"confirm.desc\") }}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr v-for=\"patient in sortedPatients(patients)\" :key=\"patient.id\">\n                        <td>{{ patient.bus_time || '-' }}</td>\n                        <td>{{ patient.name }}</td>\n                        <td>{{ patient.phone_no }}</td>\n                        <td>{{ patient.appointment_date }}</td>\n                        <td>{{ patient.appointment_time }}</td>\n                        <td>{{ patient.department }}</td>\n                        <td>{{ patient.description }}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n    data() {\n        return {\n            patients: []\n        };\n    },\n    computed: {\n        // Group patients by hospital_name\n        groupedPatients() {\n            return this.patients.reduce((groups, patient) => {\n                const hospitalName = patient.hospital_name;\n                if (!groups[hospitalName]) {\n                    groups[hospitalName] = [];\n                }\n                groups[hospitalName].push(patient);\n                return groups;\n            }, {});\n        }\n    },\n    methods: {\n        // Sort patients by appointment_date first, then appointment_time\n        sortedPatients(patients) {\n            return [...patients].sort((a, b) => {\n                const dateA = new Date(a.appointment_date);\n                const dateB = new Date(b.appointment_date);\n\n                if (dateA - dateB !== 0) {\n                    return dateA - dateB; // Sort by date first\n                }\n\n                const timeA = new Date(`1970-01-01T${a.appointment_time}`);\n                const timeB = new Date(`1970-01-01T${b.appointment_time}`);\n                return timeA - timeB; // If dates are equal, sort by time\n            });\n        },\n        async fetchPatients() {\n            try {\n                const response = await axios.get('http://localhost:8000/api/patients/translator-view/');\n                this.patients = response.data;\n            } catch (error) {\n                console.error('Error fetching patients:', error);\n            }\n        }\n    },\n    mounted() {\n        this.fetchPatients();\n    }\n};\n</script>\n\n<style scoped>\n.translator-view-container {\n    padding: 20px;\n}\n\n.hospital-section {\n    margin-bottom: 30px;\n}\n\n.hospital-title {\n    font-size: 1.5rem;\n    font-weight: bold;\n    margin-bottom: 10px;\n}\n\n.table {\n    margin-top: 10px;\n}\n</style>\n"],"mappings":";AAoCA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACXC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,QAAQ,EAAE;IACd,CAAC;EACL,CAAC;EACDC,QAAQ,EAAE;IACN;IACAC,eAAeA,CAAA,EAAG;MACd,OAAO,IAAI,CAACF,QAAQ,CAACG,MAAM,CAAC,CAACC,MAAM,EAAEC,OAAO,KAAK;QAC7C,MAAMC,YAAW,GAAID,OAAO,CAACE,aAAa;QAC1C,IAAI,CAACH,MAAM,CAACE,YAAY,CAAC,EAAE;UACvBF,MAAM,CAACE,YAAY,IAAI,EAAE;QAC7B;QACAF,MAAM,CAACE,YAAY,CAAC,CAACE,IAAI,CAACH,OAAO,CAAC;QAClC,OAAOD,MAAM;MACjB,CAAC,EAAE,CAAC,CAAC,CAAC;IACV;EACJ,CAAC;EACDK,OAAO,EAAE;IACL;IACAC,cAAcA,CAACV,QAAQ,EAAE;MACrB,OAAO,CAAC,GAAGA,QAAQ,CAAC,CAACW,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QAChC,MAAMC,KAAI,GAAI,IAAIC,IAAI,CAACH,CAAC,CAACI,gBAAgB,CAAC;QAC1C,MAAMC,KAAI,GAAI,IAAIF,IAAI,CAACF,CAAC,CAACG,gBAAgB,CAAC;QAE1C,IAAIF,KAAI,GAAIG,KAAI,KAAM,CAAC,EAAE;UACrB,OAAOH,KAAI,GAAIG,KAAK,EAAE;QAC1B;QAEA,MAAMC,KAAI,GAAI,IAAIH,IAAI,CAAC,cAAcH,CAAC,CAACO,gBAAgB,EAAE,CAAC;QAC1D,MAAMC,KAAI,GAAI,IAAIL,IAAI,CAAC,cAAcF,CAAC,CAACM,gBAAgB,EAAE,CAAC;QAC1D,OAAOD,KAAI,GAAIE,KAAK,EAAE;MAC1B,CAAC,CAAC;IACN,CAAC;IACD,MAAMC,aAAaA,CAAA,EAAG;MAClB,IAAI;QACA,MAAMC,QAAO,GAAI,MAAMxB,KAAK,CAACyB,GAAG,CAAC,qDAAqD,CAAC;QACvF,IAAI,CAACvB,QAAO,GAAIsB,QAAQ,CAACvB,IAAI;MACjC,EAAE,OAAOyB,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MACpD;IACJ;EACJ,CAAC;EACDE,OAAOA,CAAA,EAAG;IACN,IAAI,CAACL,aAAa,CAAC,CAAC;EACxB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}