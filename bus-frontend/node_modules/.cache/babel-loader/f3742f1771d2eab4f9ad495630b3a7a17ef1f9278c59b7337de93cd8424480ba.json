{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-57ba0680\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"taxi-users-container container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Patients Needing a Taxi\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"table is-fullwidth\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"table\", _hoisted_3, [_createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, _toDisplayString(_ctx.$t(\"confirm.bustime\")), 1 /* TEXT */), _createElementVNode(\"th\", null, _toDisplayString(_ctx.$t(\"confirm.name\")), 1 /* TEXT */), _createElementVNode(\"th\", null, _toDisplayString(_ctx.$t(\"confirm.phone\")), 1 /* TEXT */), _createElementVNode(\"th\", null, _toDisplayString(_ctx.$t(\"confirm.appDate\")), 1 /* TEXT */), _createElementVNode(\"th\", null, _toDisplayString(_ctx.$t(\"confirm.appTime\")), 1 /* TEXT */), _createElementVNode(\"th\", null, _toDisplayString(_ctx.$t(\"confirm.hospital\")), 1 /* TEXT */), _createElementVNode(\"th\", null, _toDisplayString(_ctx.$t(\"confirm.department\")), 1 /* TEXT */), _createElementVNode(\"th\", null, _toDisplayString(_ctx.$t(\"confirm.desc\")), 1 /* TEXT */), _createElementVNode(\"th\", null, _toDisplayString(_ctx.$t(\"confirm.hasTaxi\")), 1 /* TEXT */), _createCommentVNode(\" New taxi field \")])]), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.sortedPatients, patient => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: patient.id\n    }, [_createElementVNode(\"td\", null, _toDisplayString($options.formatTime(patient.bus_time) || '-'), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(patient.name), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(patient.phone_no), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString($options.formatDate(patient.appointment_date)), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString($options.formatTime(patient.appointment_time)), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(patient.hospital_name), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(patient.department), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(patient.description), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString($options.formatBoolean(patient.has_taxi)), 1 /* TEXT */), _createCommentVNode(\" Show Yes/No for taxi need \")]);\n  }), 128 /* KEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_toDisplayString","_ctx","$t","_createCommentVNode","_Fragment","_renderList","$options","sortedPatients","patient","key","id","formatTime","bus_time","name","phone_no","formatDate","appointment_date","appointment_time","hospital_name","department","description","formatBoolean","has_taxi"],"sources":["/home/peter/projects/bus-frontend/src/views/TaxiUsers.vue"],"sourcesContent":["<template>\n    <div class=\"taxi-users-container container\">\n        <h2>Patients Needing a Taxi</h2>\n\n        <table class=\"table is-fullwidth\">\n            <thead>\n                <tr>\n                    <th>{{ $t(\"confirm.bustime\") }}</th>\n                    <th>{{ $t(\"confirm.name\") }}</th>\n                    <th>{{ $t(\"confirm.phone\") }}</th>\n                    <th>{{ $t(\"confirm.appDate\") }}</th>\n                    <th>{{ $t(\"confirm.appTime\") }}</th>\n                    <th>{{ $t(\"confirm.hospital\") }}</th>\n                    <th>{{ $t(\"confirm.department\") }}</th>\n                    <th>{{ $t(\"confirm.desc\") }}</th>\n                    <th>{{ $t(\"confirm.hasTaxi\") }}</th> <!-- New taxi field -->\n                </tr>\n            </thead>\n            <tbody>\n                <template v-for=\"patient in sortedPatients\" :key=\"patient.id\">\n                    <tr>\n                        <td>{{ formatTime(patient.bus_time) || '-' }}</td>\n                        <td>{{ patient.name }}</td>\n                        <td>{{ patient.phone_no }}</td>\n                        <td>{{ formatDate(patient.appointment_date) }}</td>\n                        <td>{{ formatTime(patient.appointment_time) }}</td>\n                        <td>{{ patient.hospital_name }}</td>\n                        <td>{{ patient.department }}</td>\n                        <td>{{ patient.description }}</td>\n                        <td>{{ formatBoolean(patient.has_taxi) }}</td> <!-- Show Yes/No for taxi need -->\n                    </tr>\n                </template>\n            </tbody>\n        </table>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n    data() {\n        return {\n            patients: []\n        };\n    },\n    computed: {\n        sortedPatients() {\n            return [...this.patients].sort((a, b) => {\n                const dateA = new Date(a.appointment_date);\n                const dateB = new Date(b.appointment_date);\n                if (dateA !== dateB) return dateA - dateB;\n\n                const timeA = new Date(`1970-01-01T${a.appointment_time}`);\n                const timeB = new Date(`1970-01-01T${b.appointment_time}`);\n                return timeA - timeB;\n            });\n        }\n    },\n    mounted() {\n        this.fetchPatients();\n    },\n    methods: {\n        async fetchPatients() {\n            try {\n                const response = await axios.get('http://localhost:8000/api/patients/taxi-users/');\n                console.log(response.data);\n                this.patients = response.data;\n            } catch (error) {\n                console.error('Error fetching patients:', error);\n            }\n        },\n        formatDate(date) {\n            const options = { day: '2-digit', month: '2-digit', year: 'numeric' };\n            return new Date(date).toLocaleDateString('en-GB', options);\n        },\n        formatTime(time) {\n            return time ? time.substring(0, 5) : '';\n        },\n        formatBoolean(value) {\n            const locale = this.$i18n.locale; // Get current locale\n\n            if (locale === 'da') {\n                // Danish translations\n                return value ? 'Ja' : 'Nej';\n            } else if (locale === 'gl') {\n                // Kalaallisut translations\n                return value ? 'Aap' : 'Naamik';\n            }\n            return value ? 'yes' : 'no'; // Fallback for other locales\n        }\n    }\n};\n</script>\n\n<style scoped>\n.taxi-users-container {\n    padding: 20px;\n}\n\n.table {\n    margin-top: 20px;\n}\n</style>\n"],"mappings":";;;EACSA,KAAK,EAAC;AAAgC;gEACvCC,mBAAA,CAAgC,YAA5B,yBAAuB;;EAEpBD,KAAK,EAAC;AAAoB;;uBAHrCE,mBAAA,CAiCM,OAjCNC,UAiCM,GAhCFC,UAAgC,EAEhCH,mBAAA,CA6BQ,SA7BRI,UA6BQ,GA5BJJ,mBAAA,CAYQ,gBAXJA,mBAAA,CAUK,aATDA,mBAAA,CAAoC,YAAAK,gBAAA,CAA7BC,IAAA,CAAAC,EAAE,qCACTP,mBAAA,CAAiC,YAAAK,gBAAA,CAA1BC,IAAA,CAAAC,EAAE,kCACTP,mBAAA,CAAkC,YAAAK,gBAAA,CAA3BC,IAAA,CAAAC,EAAE,mCACTP,mBAAA,CAAoC,YAAAK,gBAAA,CAA7BC,IAAA,CAAAC,EAAE,qCACTP,mBAAA,CAAoC,YAAAK,gBAAA,CAA7BC,IAAA,CAAAC,EAAE,qCACTP,mBAAA,CAAqC,YAAAK,gBAAA,CAA9BC,IAAA,CAAAC,EAAE,sCACTP,mBAAA,CAAuC,YAAAK,gBAAA,CAAhCC,IAAA,CAAAC,EAAE,wCACTP,mBAAA,CAAiC,YAAAK,gBAAA,CAA1BC,IAAA,CAAAC,EAAE,kCACTP,mBAAA,CAAoC,YAAAK,gBAAA,CAA7BC,IAAA,CAAAC,EAAE,qCAA4BC,mBAAA,oBAAuB,C,KAGpER,mBAAA,CAcQ,iB,kBAbJC,mBAAA,CAYWQ,SAAA,QA/B3BC,WAAA,CAmB4CC,QAAA,CAAAC,cAAc,EAAzBC,OAAO;yBACpBZ,mBAAA,CAUK;MA9BzBa,GAAA,EAmBkED,OAAO,CAACE;QAElDf,mBAAA,CAAkD,YAAAK,gBAAA,CAA3CM,QAAA,CAAAK,UAAU,CAACH,OAAO,CAACI,QAAQ,0BAClCjB,mBAAA,CAA2B,YAAAK,gBAAA,CAApBQ,OAAO,CAACK,IAAI,kBACnBlB,mBAAA,CAA+B,YAAAK,gBAAA,CAAxBQ,OAAO,CAACM,QAAQ,kBACvBnB,mBAAA,CAAmD,YAAAK,gBAAA,CAA5CM,QAAA,CAAAS,UAAU,CAACP,OAAO,CAACQ,gBAAgB,mBAC1CrB,mBAAA,CAAmD,YAAAK,gBAAA,CAA5CM,QAAA,CAAAK,UAAU,CAACH,OAAO,CAACS,gBAAgB,mBAC1CtB,mBAAA,CAAoC,YAAAK,gBAAA,CAA7BQ,OAAO,CAACU,aAAa,kBAC5BvB,mBAAA,CAAiC,YAAAK,gBAAA,CAA1BQ,OAAO,CAACW,UAAU,kBACzBxB,mBAAA,CAAkC,YAAAK,gBAAA,CAA3BQ,OAAO,CAACY,WAAW,kBAC1BzB,mBAAA,CAA8C,YAAAK,gBAAA,CAAvCM,QAAA,CAAAe,aAAa,CAACb,OAAO,CAACc,QAAQ,mBAAUnB,mBAAA,+BAAkC,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}