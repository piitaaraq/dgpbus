{"ast":null,"code":"// stores/auth.js\nimport { defineStore } from 'pinia';\nimport axios from 'axios';\nexport const useAuthStore = defineStore({\n  id: 'auth',\n  // ID for the store\n  state: () => ({\n    // Initialize state from localStorage to enable user to stay logged in\n    user: JSON.parse(localStorage.getItem('user')) || null,\n    // This could store user info or token\n    token: localStorage.getItem('token') || null,\n    // Store JWT token\n    returnUrl: null // For redirecting after login, if needed\n  }),\n  getters: {\n    // Check if the user is authenticated by verifying the token\n    isAuthenticated: state => !!state.token // Return true if token exists\n  },\n  actions: {\n    // Action to handle user login and store token/user data\n    async login(email, password) {\n      try {\n        const response = await axios.post('http://localhost:8000/api/token/', {\n          email,\n          password\n        });\n        this.token = response.data.access; // Save JWT token in Pinia state\n        this.user = {\n          email\n        }; // Example of storing user data, modify as needed\n\n        // Store token and user in localStorage\n        localStorage.setItem('token', this.token);\n        localStorage.setItem('user', JSON.stringify(this.user)); // Store user info in localStorage\n      } catch (error) {\n        console.error('Login failed:', error);\n        throw new Error('Login failed. Please check your credentials.');\n      }\n    },\n    // Action to handle user logout\n    logout() {\n      this.token = null; // Clear token from Pinia state\n      this.user = null; // Clear user data from Pinia state\n\n      // Remove token and user from localStorage\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n    },\n    // Action to restore token and user from localStorage when app loads\n    restoreToken() {\n      const token = localStorage.getItem('token');\n      const user = localStorage.getItem('user');\n      if (token) {\n        this.token = token; // Restore token to Pinia state\n      }\n      if (user) {\n        this.user = JSON.parse(user); // Restore user data to Pinia state\n      }\n    }\n  }\n});","map":{"version":3,"names":["defineStore","axios","useAuthStore","id","state","user","JSON","parse","localStorage","getItem","token","returnUrl","getters","isAuthenticated","actions","login","email","password","response","post","data","access","setItem","stringify","error","console","Error","logout","removeItem","restoreToken"],"sources":["/home/peter/projects/bus-frontend/src/stores/auth.js"],"sourcesContent":["// stores/auth.js\nimport { defineStore } from 'pinia';\nimport axios from 'axios';\n\nexport const useAuthStore = defineStore({\n  id: 'auth',  // ID for the store\n  state: () => ({\n    // Initialize state from localStorage to enable user to stay logged in\n    user: JSON.parse(localStorage.getItem('user')) || null,  // This could store user info or token\n    token: localStorage.getItem('token') || null,  // Store JWT token\n    returnUrl: null  // For redirecting after login, if needed\n  }),\n\n  getters: {\n    // Check if the user is authenticated by verifying the token\n    isAuthenticated: (state) => !!state.token,  // Return true if token exists\n  },\n\n  actions: {\n    // Action to handle user login and store token/user data\n    async login(email, password) {\n      try {\n        const response = await axios.post('http://localhost:8000/api/token/', {\n          email,\n          password,\n        });\n\n        this.token = response.data.access;  // Save JWT token in Pinia state\n        this.user = { email };  // Example of storing user data, modify as needed\n\n        // Store token and user in localStorage\n        localStorage.setItem('token', this.token);\n        localStorage.setItem('user', JSON.stringify(this.user));  // Store user info in localStorage\n      } catch (error) {\n        console.error('Login failed:', error);\n        throw new Error('Login failed. Please check your credentials.');\n      }\n    },\n\n    // Action to handle user logout\n    logout() {\n      this.token = null;  // Clear token from Pinia state\n      this.user = null;  // Clear user data from Pinia state\n\n      // Remove token and user from localStorage\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n    },\n\n    // Action to restore token and user from localStorage when app loads\n    restoreToken() {\n      const token = localStorage.getItem('token');\n      const user = localStorage.getItem('user');\n      if (token) {\n        this.token = token;  // Restore token to Pinia state\n      }\n      if (user) {\n        this.user = JSON.parse(user);  // Restore user data to Pinia state\n      }\n    },\n  },\n});\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,OAAO;AACnC,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,YAAY,GAAGF,WAAW,CAAC;EACtCG,EAAE,EAAE,MAAM;EAAG;EACbC,KAAK,EAAEA,CAAA,MAAO;IACZ;IACAC,IAAI,EAAEC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,IAAI;IAAG;IACzDC,KAAK,EAAEF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI;IAAG;IAC/CE,SAAS,EAAE,IAAI,CAAE;EACnB,CAAC,CAAC;EAEFC,OAAO,EAAE;IACP;IACAC,eAAe,EAAGT,KAAK,IAAK,CAAC,CAACA,KAAK,CAACM,KAAK,CAAG;EAC9C,CAAC;EAEDI,OAAO,EAAE;IACP;IACA,MAAMC,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;MAC3B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,IAAI,CAAC,kCAAkC,EAAE;UACpEH,KAAK;UACLC;QACF,CAAC,CAAC;QAEF,IAAI,CAACP,KAAK,GAAGQ,QAAQ,CAACE,IAAI,CAACC,MAAM,CAAC,CAAE;QACpC,IAAI,CAAChB,IAAI,GAAG;UAAEW;QAAM,CAAC,CAAC,CAAE;;QAExB;QACAR,YAAY,CAACc,OAAO,CAAC,OAAO,EAAE,IAAI,CAACZ,KAAK,CAAC;QACzCF,YAAY,CAACc,OAAO,CAAC,MAAM,EAAEhB,IAAI,CAACiB,SAAS,CAAC,IAAI,CAAClB,IAAI,CAAC,CAAC,CAAC,CAAE;MAC5D,CAAC,CAAC,OAAOmB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;QACrC,MAAM,IAAIE,KAAK,CAAC,8CAA8C,CAAC;MACjE;IACF,CAAC;IAED;IACAC,MAAMA,CAAA,EAAG;MACP,IAAI,CAACjB,KAAK,GAAG,IAAI,CAAC,CAAE;MACpB,IAAI,CAACL,IAAI,GAAG,IAAI,CAAC,CAAE;;MAEnB;MACAG,YAAY,CAACoB,UAAU,CAAC,OAAO,CAAC;MAChCpB,YAAY,CAACoB,UAAU,CAAC,MAAM,CAAC;IACjC,CAAC;IAED;IACAC,YAAYA,CAAA,EAAG;MACb,MAAMnB,KAAK,GAAGF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMJ,IAAI,GAAGG,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;MACzC,IAAIC,KAAK,EAAE;QACT,IAAI,CAACA,KAAK,GAAGA,KAAK,CAAC,CAAE;MACvB;MACA,IAAIL,IAAI,EAAE;QACR,IAAI,CAACA,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACF,IAAI,CAAC,CAAC,CAAE;MACjC;IACF;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}