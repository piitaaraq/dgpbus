{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-96cdd5ce\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"translator-view-container container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Patienter med behov for tolk\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"hospital-title\"\n};\nconst _hoisted_4 = {\n  class: \"table is-fullwidth\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createCommentVNode(\" Loop through each group of patients based on hospital \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.groupedPatients, (patients, hospital) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: hospital,\n      class: \"hospital-section\"\n    }, [_createElementVNode(\"h3\", _hoisted_3, _toDisplayString(hospital), 1 /* TEXT */), _createElementVNode(\"table\", _hoisted_4, [_createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, _toDisplayString(_ctx.$t(\"confirm.bustime\")), 1 /* TEXT */), _createElementVNode(\"th\", null, _toDisplayString(_ctx.$t(\"confirm.name\")), 1 /* TEXT */), _createElementVNode(\"th\", null, _toDisplayString(_ctx.$t(\"confirm.phone\")), 1 /* TEXT */), _createElementVNode(\"th\", null, _toDisplayString(_ctx.$t(\"confirm.appDate\")), 1 /* TEXT */), _createElementVNode(\"th\", null, _toDisplayString(_ctx.$t(\"confirm.appTime\")), 1 /* TEXT */), _createElementVNode(\"th\", null, _toDisplayString(_ctx.$t(\"confirm.department\")), 1 /* TEXT */), _createElementVNode(\"th\", null, _toDisplayString(_ctx.$t(\"confirm.desc\")), 1 /* TEXT */)])]), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.sortedPatients(patients), patient => {\n      return _openBlock(), _createElementBlock(\"tr\", {\n        key: patient.id\n      }, [_createElementVNode(\"td\", null, _toDisplayString(patient.bus_time || '-'), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(patient.name), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(patient.phone_no), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString($options.formatDate(patient.appointment_date)), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString($options.formatTime(patient.appointment_time)), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(patient.department), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(patient.description), 1 /* TEXT */)]);\n    }), 128 /* KEYED_FRAGMENT */))])])]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_createCommentVNode","_Fragment","_renderList","$options","groupedPatients","patients","hospital","key","_hoisted_3","_toDisplayString","_hoisted_4","_ctx","$t","sortedPatients","patient","id","bus_time","name","phone_no","formatDate","appointment_date","formatTime","appointment_time","department","description"],"sources":["/home/peter/projects/bus-frontend/src/views/TranslatorView.vue"],"sourcesContent":["<template>\n    <div class=\"translator-view-container container\">\n        <h2>Patienter med behov for tolk</h2>\n\n        <!-- Loop through each group of patients based on hospital -->\n        <div v-for=\"(patients, hospital) in groupedPatients\" :key=\"hospital\" class=\"hospital-section\">\n            <h3 class=\"hospital-title\">{{ hospital }}</h3>\n            <table class=\"table is-fullwidth\">\n                <thead>\n                    <tr>\n                        <th>{{ $t(\"confirm.bustime\") }}</th>\n                        <th>{{ $t(\"confirm.name\") }}</th>\n                        <th>{{ $t(\"confirm.phone\") }}</th>\n                        <th>{{ $t(\"confirm.appDate\") }}</th>\n                        <th>{{ $t(\"confirm.appTime\") }}</th>\n                        <th>{{ $t(\"confirm.department\") }}</th>\n                        <th>{{ $t(\"confirm.desc\") }}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr v-for=\"patient in sortedPatients(patients)\" :key=\"patient.id\">\n                        <td>{{ patient.bus_time || '-' }}</td>\n                        <td>{{ patient.name }}</td>\n                        <td>{{ patient.phone_no }}</td>\n                        <td>{{ formatDate(patient.appointment_date) }}</td>\n                        <td>{{ formatTime(patient.appointment_time) }}</td>\n                        <td>{{ patient.department }}</td>\n                        <td>{{ patient.description }}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n    data() {\n        return {\n            patients: []\n        };\n    },\n    computed: {\n        // Group patients by hospital_name\n        groupedPatients() {\n            return this.patients.reduce((groups, patient) => {\n                const hospitalName = patient.hospital_name;\n                if (!groups[hospitalName]) {\n                    groups[hospitalName] = [];\n                }\n                groups[hospitalName].push(patient);\n                return groups;\n            }, {});\n        }\n    },\n    methods: {\n        // Format date to dd/mm/yyyy\n        formatDate(dateString) {\n            const date = new Date(dateString);\n            const day = String(date.getDate()).padStart(2, '0');\n            const month = String(date.getMonth() + 1).padStart(2, '0'); // Month is 0-indexed\n            const year = date.getFullYear();\n            return `${day}/${month}/${year}`;\n        },\n\n        // Format time to hh:mm\n        formatTime(timeString) {\n            const time = new Date(`1970-01-01T${timeString}`);\n            const hours = String(time.getHours()).padStart(2, '0');\n            const minutes = String(time.getMinutes()).padStart(2, '0');\n            return `${hours}:${minutes}`;\n        },\n\n        // Sort patients by appointment_date first, then appointment_time\n        sortedPatients(patients) {\n            return [...patients].sort((a, b) => {\n                const dateA = new Date(a.appointment_date);\n                const dateB = new Date(b.appointment_date);\n\n                if (dateA - dateB !== 0) {\n                    return dateA - dateB; // Sort by date first\n                }\n\n                const timeA = new Date(`1970-01-01T${a.appointment_time}`);\n                const timeB = new Date(`1970-01-01T${b.appointment_time}`);\n                return timeA - timeB; // If dates are equal, sort by time\n            });\n        },\n\n        async fetchPatients() {\n            try {\n                const response = await axios.get('http://localhost:8000/api/patients/translator-view/');\n                this.patients = response.data;\n            } catch (error) {\n                console.error('Error fetching patients:', error);\n            }\n        }\n    },\n    mounted() {\n        this.fetchPatients();\n    }\n};\n</script>\n\n<style scoped>\n.translator-view-container {\n    padding: 20px;\n}\n\n.hospital-section {\n    margin-bottom: 30px;\n}\n\n.hospital-title {\n    font-size: 1.5rem;\n    font-weight: bold;\n    margin-bottom: 10px;\n}\n\n.table {\n    margin-top: 10px;\n}\n</style>\n"],"mappings":";;;EACSA,KAAK,EAAC;AAAqC;gEAC5CC,mBAAA,CAAqC,YAAjC,8BAA4B;;EAIxBD,KAAK,EAAC;AAAgB;;EACnBA,KAAK,EAAC;AAAoB;;uBANzCE,mBAAA,CA+BM,OA/BNC,UA+BM,GA9BFC,UAAqC,EAErCC,mBAAA,2DAA8D,G,kBAC9DH,mBAAA,CA0BMI,SAAA,QA/BdC,WAAA,CAK4CC,QAAA,CAAAC,eAAe,EAL3D,CAKqBC,QAAQ,EAAEC,QAAQ;yBAA/BT,mBAAA,CA0BM;MA1BgDU,GAAG,EAAED,QAAQ;MAAEX,KAAK,EAAC;QACvEC,mBAAA,CAA8C,MAA9CY,UAA8C,EAAAC,gBAAA,CAAhBH,QAAQ,kBACtCV,mBAAA,CAuBQ,SAvBRc,UAuBQ,GAtBJd,mBAAA,CAUQ,gBATJA,mBAAA,CAQK,aAPDA,mBAAA,CAAoC,YAAAa,gBAAA,CAA7BE,IAAA,CAAAC,EAAE,qCACThB,mBAAA,CAAiC,YAAAa,gBAAA,CAA1BE,IAAA,CAAAC,EAAE,kCACThB,mBAAA,CAAkC,YAAAa,gBAAA,CAA3BE,IAAA,CAAAC,EAAE,mCACThB,mBAAA,CAAoC,YAAAa,gBAAA,CAA7BE,IAAA,CAAAC,EAAE,qCACThB,mBAAA,CAAoC,YAAAa,gBAAA,CAA7BE,IAAA,CAAAC,EAAE,qCACThB,mBAAA,CAAuC,YAAAa,gBAAA,CAAhCE,IAAA,CAAAC,EAAE,wCACThB,mBAAA,CAAiC,YAAAa,gBAAA,CAA1BE,IAAA,CAAAC,EAAE,iC,KAGjBhB,mBAAA,CAUQ,iB,kBATJC,mBAAA,CAQKI,SAAA,QA5BzBC,WAAA,CAoB0CC,QAAA,CAAAU,cAAc,CAACR,QAAQ,GAAlCS,OAAO;2BAAlBjB,mBAAA,CAQK;QAR4CU,GAAG,EAAEO,OAAO,CAACC;UAC1DnB,mBAAA,CAAsC,YAAAa,gBAAA,CAA/BK,OAAO,CAACE,QAAQ,yBACvBpB,mBAAA,CAA2B,YAAAa,gBAAA,CAApBK,OAAO,CAACG,IAAI,kBACnBrB,mBAAA,CAA+B,YAAAa,gBAAA,CAAxBK,OAAO,CAACI,QAAQ,kBACvBtB,mBAAA,CAAmD,YAAAa,gBAAA,CAA5CN,QAAA,CAAAgB,UAAU,CAACL,OAAO,CAACM,gBAAgB,mBAC1CxB,mBAAA,CAAmD,YAAAa,gBAAA,CAA5CN,QAAA,CAAAkB,UAAU,CAACP,OAAO,CAACQ,gBAAgB,mBAC1C1B,mBAAA,CAAiC,YAAAa,gBAAA,CAA1BK,OAAO,CAACS,UAAU,kBACzB3B,mBAAA,CAAkC,YAAAa,gBAAA,CAA3BK,OAAO,CAACU,WAAW,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}