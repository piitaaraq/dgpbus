{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      patients: []\n    };\n  },\n  computed: {\n    sortedPatients() {\n      return [...this.patients].sort((a, b) => {\n        const dateA = new Date(a.appointment_date);\n        const dateB = new Date(b.appointment_date);\n        if (dateA !== dateB) return dateA - dateB;\n        const timeA = new Date(`1970-01-01T${a.appointment_time}`);\n        const timeB = new Date(`1970-01-01T${b.appointment_time}`);\n        return timeA - timeB;\n      });\n    }\n  },\n  mounted() {\n    this.fetchPatients();\n  },\n  methods: {\n    async fetchPatients() {\n      try {\n        const response = await axios.get('http://localhost:8000/api/patients/taxi-users/');\n        this.patients = response.data;\n      } catch (error) {\n        console.error('Error fetching patients:', error);\n      }\n    },\n    formatDate(date) {\n      const options = {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric'\n      };\n      return new Date(date).toLocaleDateString('en-GB', options);\n    },\n    formatTime(time) {\n      return time ? time.substring(0, 5) : '';\n    }\n  }\n};","map":{"version":3,"names":["axios","data","patients","computed","sortedPatients","sort","a","b","dateA","Date","appointment_date","dateB","timeA","appointment_time","timeB","mounted","fetchPatients","methods","response","get","error","console","formatDate","date","options","day","month","year","toLocaleDateString","formatTime","time","substring"],"sources":["/home/peter/projects/bus-frontend/src/views/TaxiUsers.vue"],"sourcesContent":["<template>\n    <div class=\"taxi-users-container container\">\n        <h2>Patients Needing a Taxi</h2>\n\n        <table class=\"table is-fullwidth\">\n            <thead>\n                <tr>\n                    <th>{{ $t(\"confirm.bustime\") }}</th>\n                    <th>{{ $t(\"confirm.name\") }}</th>\n                    <th>{{ $t(\"confirm.phone\") }}</th>\n                    <th>{{ $t(\"confirm.appDate\") }}</th>\n                    <th>{{ $t(\"confirm.appTime\") }}</th>\n                    <th>{{ $t(\"confirm.hospital\") }}</th>\n                    <th>{{ $t(\"confirm.department\") }}</th>\n                    <th>{{ $t(\"confirm.desc\") }}</th>\n                    <th>{{ $t(\"confirm.hasTaxi\") }}</th> <!-- New taxi field -->\n                </tr>\n            </thead>\n            <tbody>\n                <template v-for=\"patient in sortedPatients\" :key=\"patient.id\">\n                    <tr>\n                        <td>{{ formatTime(patient.bus_time) || '-' }}</td>\n                        <td>{{ patient.name }}</td>\n                        <td>{{ patient.phone_no }}</td>\n                        <td>{{ formatDate(patient.appointment_date) }}</td>\n                        <td>{{ formatTime(patient.appointment_time) }}</td>\n                        <td>{{ patient.hospital_name }}</td>\n                        <td>{{ patient.department }}</td>\n                        <td>{{ patient.description }}</td>\n                        <td>{{ patient.has_taxi ? 'Yes' : 'No' }}</td> <!-- Show Yes/No for taxi need -->\n                    </tr>\n                </template>\n            </tbody>\n        </table>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n    data() {\n        return {\n            patients: []\n        };\n    },\n    computed: {\n        sortedPatients() {\n            return [...this.patients].sort((a, b) => {\n                const dateA = new Date(a.appointment_date);\n                const dateB = new Date(b.appointment_date);\n                if (dateA !== dateB) return dateA - dateB;\n\n                const timeA = new Date(`1970-01-01T${a.appointment_time}`);\n                const timeB = new Date(`1970-01-01T${b.appointment_time}`);\n                return timeA - timeB;\n            });\n        }\n    },\n    mounted() {\n        this.fetchPatients();\n    },\n    methods: {\n        async fetchPatients() {\n            try {\n                const response = await axios.get('http://localhost:8000/api/patients/taxi-users/');\n                this.patients = response.data;\n            } catch (error) {\n                console.error('Error fetching patients:', error);\n            }\n        },\n        formatDate(date) {\n            const options = { day: '2-digit', month: '2-digit', year: 'numeric' };\n            return new Date(date).toLocaleDateString('en-GB', options);\n        },\n        formatTime(time) {\n            return time ? time.substring(0, 5) : '';\n        }\n    }\n};\n</script>\n\n<style scoped>\n.taxi-users-container {\n    padding: 20px;\n}\n\n.table {\n    margin-top: 20px;\n}\n</style>\n"],"mappings":"AAsCA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACXC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,QAAQ,EAAE;IACd,CAAC;EACL,CAAC;EACDC,QAAQ,EAAE;IACNC,cAAcA,CAAA,EAAG;MACb,OAAO,CAAC,GAAG,IAAI,CAACF,QAAQ,CAAC,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QACrC,MAAMC,KAAI,GAAI,IAAIC,IAAI,CAACH,CAAC,CAACI,gBAAgB,CAAC;QAC1C,MAAMC,KAAI,GAAI,IAAIF,IAAI,CAACF,CAAC,CAACG,gBAAgB,CAAC;QAC1C,IAAIF,KAAI,KAAMG,KAAK,EAAE,OAAOH,KAAI,GAAIG,KAAK;QAEzC,MAAMC,KAAI,GAAI,IAAIH,IAAI,CAAC,cAAcH,CAAC,CAACO,gBAAgB,EAAE,CAAC;QAC1D,MAAMC,KAAI,GAAI,IAAIL,IAAI,CAAC,cAAcF,CAAC,CAACM,gBAAgB,EAAE,CAAC;QAC1D,OAAOD,KAAI,GAAIE,KAAK;MACxB,CAAC,CAAC;IACN;EACJ,CAAC;EACDC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACC,aAAa,CAAC,CAAC;EACxB,CAAC;EACDC,OAAO,EAAE;IACL,MAAMD,aAAaA,CAAA,EAAG;MAClB,IAAI;QACA,MAAME,QAAO,GAAI,MAAMlB,KAAK,CAACmB,GAAG,CAAC,gDAAgD,CAAC;QAClF,IAAI,CAACjB,QAAO,GAAIgB,QAAQ,CAACjB,IAAI;MACjC,EAAE,OAAOmB,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MACpD;IACJ,CAAC;IACDE,UAAUA,CAACC,IAAI,EAAE;MACb,MAAMC,OAAM,GAAI;QAAEC,GAAG,EAAE,SAAS;QAAEC,KAAK,EAAE,SAAS;QAAEC,IAAI,EAAE;MAAU,CAAC;MACrE,OAAO,IAAIlB,IAAI,CAACc,IAAI,CAAC,CAACK,kBAAkB,CAAC,OAAO,EAAEJ,OAAO,CAAC;IAC9D,CAAC;IACDK,UAAUA,CAACC,IAAI,EAAE;MACb,OAAOA,IAAG,GAAIA,IAAI,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE;IAC3C;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}