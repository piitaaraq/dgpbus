{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { useFormStore } from '@/stores/formStore';\nexport default {\n  props: ['id'],\n  data() {\n    return {\n      form: {\n        name: '',\n        room: '',\n        appointment_date: '',\n        appointment_time: '',\n        department: '',\n        description: '',\n        needs_translator: false,\n        hospital: this.id // Automatically associate the hospital ID\n      }\n    };\n  },\n  methods: {\n    async goToConfirmation() {\n      const formStore = useFormStore(); // Access the Pinia store\n\n      console.log('Hospital ID:', this.id); // Confirm the hospital ID is correct\n\n      // Only calculate bus time for hospitals 1 and 8\n      if ([1, 8].includes(Number(this.form.hospital))) {\n        try {\n          // Make the POST request to calculate the bus time\n          const response = await axios.post('http://localhost:8000/api/patients/calculate_bus_time/', this.form);\n          const busTime = response.data.bus_time;\n\n          // Set form data and busTime in the store\n          formStore.setFormData({\n            ...this.form,\n            busTime: busTime || null\n          });\n          console.log('FormData stored in Pinia:', formStore.formData);\n        } catch (error) {\n          console.error('Error calculating bus time:', error);\n          alert('An error occurred while calculating the bus time. Please try again.');\n        }\n      } else {\n        // No bus time for other hospitals\n        formStore.setFormData(this.form);\n        console.log('FormData stored in Pinia (no bus time):', formStore.formData);\n      }\n\n      // Navigate to the confirmation page\n      this.$router.push({\n        name: 'ConfirmForm'\n      });\n    },\n    goBack() {\n      this.$router.push({\n        name: 'HospitalList'\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","useFormStore","props","data","form","name","room","appointment_date","appointment_time","department","description","needs_translator","hospital","id","methods","goToConfirmation","formStore","console","log","includes","Number","response","post","busTime","bus_time","setFormData","formData","error","alert","$router","push","goBack"],"sources":["/home/peter/projects/bus-frontend/src/views/HospitalForm.vue"],"sourcesContent":["<template>\n  <nav class=\"breadcrumb\" aria-label=\"breadcrumbs\">\n    <ul>\n      <li v-for=\"(crumb, index) in breadcrumbs\" :key=\"index\">\n        <router-link :to=\"crumb.link\">{{ $t(`breadcrumbs.${crumb.name}`) }}</router-link>\n      </li>\n    </ul>\n  </nav>\n  <div class=\"hospital-form-container container\">\n    <div class=\"explanatory-text\">\n      <h2 class=\"title is-2\">{{ $t(\"formular.heading\") }}</h2>\n      <p class=\"is-size-4 content\">\n        {{ $t('hospitalform.para1') }}\n      </p>\n      <p class=\"is-size-4 content\">\n        {{ $t('hospitalform.para2') }}\n      </p>\n      <p class=\"is-size-4 content\">\n        {{ $t('hospitalform.para3') }}\n      </p>\n    </div>\n\n    <div class=\"form-section\">\n      <form @submit.prevent=\"submitForm\">\n        <div class=\"field\">\n          <label class=\"label\">{{ $t(\"formular.name\") }}</label>\n          <div class=\"control\">\n            <input class=\"input\" type=\"text\" v-model=\"form.name\" required />\n          </div>\n        </div>\n\n        <div class=\"field\">\n          <label class=\"label\">{{ $t(\"formular.room\") }}</label>\n          <div class=\"control\">\n            <input class=\"input\" type=\"text\" v-model=\"form.room\" required />\n          </div>\n        </div>\n\n        <div class=\"field\">\n          <label class=\"label\">{{ $t(\"formular.appDate\") }}</label>\n          <div class=\"control\">\n            <input class=\"input\" type=\"date\" v-model=\"form.appointment_date\" required />\n          </div>\n        </div>\n\n        <div class=\"field\">\n          <label class=\"label\">{{ $t(\"formular.appTime\") }}</label>\n          <div class=\"control\">\n            <input class=\"input\" type=\"time\" v-model=\"form.appointment_time\" required />\n          </div>\n        </div>\n\n        <div class=\"field\">\n          <label class=\"label\">{{ $t(\"formular.department\") }}</label>\n          <div class=\"control\">\n            <input class=\"input\" type=\"text\" v-model=\"form.department\" required />\n          </div>\n        </div>\n\n        <div class=\"field\">\n          <label class=\"label\">{{ $t(\"formular.desc\") }}</label>\n          <div class=\"control\">\n            <textarea class=\"textarea\" v-model=\"form.description\"></textarea>\n          </div>\n        </div>\n\n        <div class=\"field\">\n          <label class=\"label\">{{ $t(\"formular.translator\") }}</label>\n          <div class=\"control\">\n            <label class=\"radio\">\n              <input type=\"radio\" v-model=\"form.needs_translator\" :value=\"true\" />\n              {{ $t(\"formular.radioY\") }}\n            </label>\n            <label class=\"radio\">\n              <input type=\"radio\" v-model=\"form.needs_translator\" :value=\"false\" />\n              {{ $t(\"formular.radioN\") }}\n            </label>\n          </div>\n        </div>\n        <div class=\"field is-grouped mt-4\" style=\"display: flex; gap: 10px\">\n          <div class=\"control\">\n            <button class=\"button is-large is-primary\" type=\"button\" @click=\"goToConfirmation\">\n              {{ $t(\"formular.submit\") }}\n            </button>\n          </div>\n          <div class=\"control\">\n            <button class=\"button is-large is-light\" type=\"button\" @click=\"goBack\">\n              {{ $t(\"formular.back\") }}\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { useFormStore } from '@/stores/formStore';\n\nexport default {\n  props: ['id'],\n  data() {\n    return {\n      form: {\n        name: '',\n        room: '',\n        appointment_date: '',\n        appointment_time: '',\n        department: '',\n        description: '',\n        needs_translator: false,\n        hospital: this.id,  // Automatically associate the hospital ID\n      },\n    };\n  },\n  methods: {\n    async goToConfirmation() {\n      const formStore = useFormStore();  // Access the Pinia store\n\n      console.log('Hospital ID:', this.id);  // Confirm the hospital ID is correct\n\n      // Only calculate bus time for hospitals 1 and 8\n      if ([1, 8].includes(Number(this.form.hospital))) {\n        try {\n          // Make the POST request to calculate the bus time\n          const response = await axios.post('http://localhost:8000/api/patients/calculate_bus_time/', this.form);\n          const busTime = response.data.bus_time;\n\n          // Set form data and busTime in the store\n          formStore.setFormData({ ...this.form, busTime: busTime || null });\n          console.log('FormData stored in Pinia:', formStore.formData);\n        } catch (error) {\n          console.error('Error calculating bus time:', error);\n          alert('An error occurred while calculating the bus time. Please try again.');\n        }\n      } else {\n        // No bus time for other hospitals\n        formStore.setFormData(this.form);\n        console.log('FormData stored in Pinia (no bus time):', formStore.formData);\n      }\n\n      // Navigate to the confirmation page\n      this.$router.push({ name: 'ConfirmForm' });\n    },\n    goBack() {\n      this.$router.push({ name: 'HospitalList' });\n    },\n  },\n}\n</script>\n\n<style scoped>\n/* Flexbox layout for wide screens */\n.hospital-form-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding: 20px;\n}\n\n.explanatory-text {\n  flex: 1;\n  margin-right: 40px;\n  min-width: 300px;\n}\n\n.content {\n  font-size: 1.5rem;\n}\n\n.form-section {\n  flex: 1;\n  min-width: 300px;\n}\n\n@media (max-width: 768px) {\n\n  /* Stack content vertically for small screens */\n  .hospital-form-container {\n    flex-direction: column;\n  }\n\n  .explanatory-text,\n  .form-section {\n    margin-right: 0;\n  }\n}\n\n.radio {\n  margin-right: 30px;\n}\n</style>\n"],"mappings":";AAiGA,OAAOA,KAAI,MAAO,OAAO;AACzB,SAASC,YAAW,QAAS,oBAAoB;AAEjD,eAAe;EACbC,KAAK,EAAE,CAAC,IAAI,CAAC;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE;QACJC,IAAI,EAAE,EAAE;QACRC,IAAI,EAAE,EAAE;QACRC,gBAAgB,EAAE,EAAE;QACpBC,gBAAgB,EAAE,EAAE;QACpBC,UAAU,EAAE,EAAE;QACdC,WAAW,EAAE,EAAE;QACfC,gBAAgB,EAAE,KAAK;QACvBC,QAAQ,EAAE,IAAI,CAACC,EAAE,CAAG;MACtB;IACF,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,gBAAgBA,CAAA,EAAG;MACvB,MAAMC,SAAQ,GAAIf,YAAY,CAAC,CAAC,EAAG;;MAEnCgB,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,IAAI,CAACL,EAAE,CAAC,EAAG;;MAEvC;MACA,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAACM,QAAQ,CAACC,MAAM,CAAC,IAAI,CAAChB,IAAI,CAACQ,QAAQ,CAAC,CAAC,EAAE;QAC/C,IAAI;UACF;UACA,MAAMS,QAAO,GAAI,MAAMrB,KAAK,CAACsB,IAAI,CAAC,wDAAwD,EAAE,IAAI,CAAClB,IAAI,CAAC;UACtG,MAAMmB,OAAM,GAAIF,QAAQ,CAAClB,IAAI,CAACqB,QAAQ;;UAEtC;UACAR,SAAS,CAACS,WAAW,CAAC;YAAE,GAAG,IAAI,CAACrB,IAAI;YAAEmB,OAAO,EAAEA,OAAM,IAAK;UAAK,CAAC,CAAC;UACjEN,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEF,SAAS,CAACU,QAAQ,CAAC;QAC9D,EAAE,OAAOC,KAAK,EAAE;UACdV,OAAO,CAACU,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;UACnDC,KAAK,CAAC,qEAAqE,CAAC;QAC9E;MACF,OAAO;QACL;QACAZ,SAAS,CAACS,WAAW,CAAC,IAAI,CAACrB,IAAI,CAAC;QAChCa,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAEF,SAAS,CAACU,QAAQ,CAAC;MAC5E;;MAEA;MACA,IAAI,CAACG,OAAO,CAACC,IAAI,CAAC;QAAEzB,IAAI,EAAE;MAAc,CAAC,CAAC;IAC5C,CAAC;IACD0B,MAAMA,CAAA,EAAG;MACP,IAAI,CAACF,OAAO,CAACC,IAAI,CAAC;QAAEzB,IAAI,EAAE;MAAe,CAAC,CAAC;IAC7C;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}